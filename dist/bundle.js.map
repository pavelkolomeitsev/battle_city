{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://battle_city/./src/classes/Map.ts","webpack://battle_city/./src/classes/animation/BangAnimation.ts","webpack://battle_city/./src/classes/animation/SparkleAnimation.ts","webpack://battle_city/./src/classes/shells/GroupOfShells.ts","webpack://battle_city/./src/classes/shells/Shell.ts","webpack://battle_city/./src/classes/vehicles/Vehicle.ts","webpack://battle_city/./src/classes/vehicles/enemies/EnemyVehicle.ts","webpack://battle_city/./src/classes/vehicles/enemies/GroupOfEnemies.ts","webpack://battle_city/./src/classes/vehicles/player/Player.ts","webpack://battle_city/./src/game.ts","webpack://battle_city/./src/scenes/BootScene.ts","webpack://battle_city/./src/scenes/Level_1.ts","webpack://battle_city/./src/scenes/PreloadScene.ts","webpack://battle_city/./src/utils/LoadingBar.ts","webpack://battle_city/./src/utils/utils.ts","webpack://battle_city/webpack/bootstrap","webpack://battle_city/webpack/before-startup","webpack://battle_city/webpack/startup","webpack://battle_city/webpack/after-startup"],"sourcesContent":["import { GROUND_FRICTION, FRICTIONS, StartPosition } from \"../utils/utils\";\r\nimport Radar from \"./vehicles/enemies/Radar\";\r\n\r\nexport default class Map {\r\n    private _scene: Phaser.Scene = null;\r\n    private _tileset: Phaser.Tilemaps.Tileset = null;\r\n    private _defenceArea: Phaser.Geom.Rectangle = null;\r\n    private _baseArea: Phaser.Geom.Rectangle = null;\r\n    private _level: string = \"\";\r\n    public tilemap: Phaser.Tilemaps.Tilemap = null;\r\n    public explosiveObjects: Phaser.GameObjects.Sprite[] = [];\r\n    public stones: Phaser.GameObjects.Sprite[] = [];\r\n\r\n    constructor(scene: Phaser.Scene, level: number) {\r\n        this._scene = scene;\r\n        this._level = `level${level}/`; // value should be the same as in tilemap app -> group of layers\r\n        this.init();\r\n        this.create();\r\n    }\r\n\r\n    init(): void {\r\n        // create a tilemap object\r\n        this.tilemap = this._scene.make.tilemap({ key: \"tilemap\" });\r\n        // add images to tilemap\r\n        // 1 param look in \"tilemap.json\" prop tilesets - name\r\n        this._tileset = this.tilemap.addTilesetImage(\"terrain\", \"tileset\", 64, 64, 0, 0);\r\n    }\r\n\r\n    create(): void {\r\n        this.createLayers();\r\n        this.createExplosiveStaticLayer();\r\n        this.createStonesLayer();\r\n    }\r\n    \r\n    private createLayers(): void {\r\n        // create 2 layers\r\n        this.tilemap.createLayer(this._level + \"grass\", this._tileset); // \"level1/grass\"\r\n        this.tilemap.createLayer(this._level + \"road\", this._tileset);\r\n    }\r\n\r\n    private createExplosiveStaticLayer(): void {\r\n        // first param - name of object`s layer in tilemap\r\n        // second param - callback function, which called for every image in tileset\r\n        this.tilemap.findObject(this._level + \"explosive_static\", collisionObject => {\r\n            // we have to cast implicitly\r\n            // collisionObject - GameObject, but we need Sprite!\r\n            const castedObject: Phaser.GameObjects.Sprite = collisionObject as Phaser.GameObjects.Sprite;\r\n            let sprite: Phaser.GameObjects.Sprite = new Phaser.GameObjects.Sprite(this._scene, castedObject.x + castedObject.width / 2, castedObject.y - castedObject.height / 2, \"objects\", collisionObject.name);\r\n            this._scene.add.existing(sprite);\r\n            this._scene.physics.add.existing(sprite, true); // true -> to make it static\r\n            sprite.body.enable = true;\r\n            this.explosiveObjects.push(sprite);\r\n        });\r\n    }\r\n\r\n    private createStonesLayer(): void {\r\n        this.tilemap.findObject(this._level + \"stones\", gameObject => {\r\n            const castedObject: Phaser.GameObjects.Sprite = gameObject as Phaser.GameObjects.Sprite;\r\n            // gameObject.name should be the same in \"objects.json\" and tilemap.json files\r\n            const sprite: Phaser.GameObjects.Sprite = new Phaser.GameObjects.Sprite(this._scene, castedObject.x + castedObject.width / 2, castedObject.y - castedObject.height / 2, \"objects\", gameObject.name);\r\n            this._scene.add.existing(sprite);\r\n            this._scene.physics.add.existing(sprite, true); // true -> to make it static\r\n            sprite.body.enable = true;\r\n            this.stones.push(sprite);\r\n        });\r\n    }\r\n\r\n    public createTreesLayer(): void {\r\n        this.tilemap.findObject(this._level + \"trees\", gameObject => {\r\n            const castedObject: Phaser.GameObjects.Sprite = gameObject as Phaser.GameObjects.Sprite;\r\n            // gameObject.name should be the same in \"objects.json\" and tilemap.json files\r\n            const sprite: Phaser.GameObjects.Sprite = new Phaser.GameObjects.Sprite(this._scene, castedObject.x + castedObject.width / 2, castedObject.y - castedObject.height / 2, \"objects\", gameObject.name);\r\n            sprite.depth = 10;\r\n            this._scene.add.existing(sprite);\r\n            this._scene.physics.add.existing(sprite, false);\r\n        });\r\n    }\r\n\r\n    // private createAreas(): void {\r\n    //     let array: Phaser.Types.Tilemaps.TiledObject[] = this.tilemap.filterObjects(\"defence_area\", checkpoint => checkpoint.name === \"defence_area\");\r\n    //     // create rectangle phaser object\r\n    //     array.forEach((item: Phaser.Types.Tilemaps.TiledObject) => {\r\n    //         this._defenceArea = new Phaser.Geom.Rectangle(item.x, item.y, item.width, item.height);\r\n    //     });\r\n\r\n    //     array = this.tilemap.filterObjects(\"base_area\", checkpoint => checkpoint.name === \"base_area\");\r\n    //     array.forEach((item: Phaser.Types.Tilemaps.TiledObject) => {\r\n    //         this._baseArea = new Phaser.Geom.Rectangle(item.x, item.y, item.width, item.height);\r\n    //     });\r\n    //     array = null;\r\n    // }\r\n\r\n    public getPlayer(): Phaser.Types.Tilemaps.TiledObject {\r\n        // find a player object in tilemap\r\n        return this.tilemap.findObject(this._level + \"player\", playerObject => playerObject.name === \"player\");\r\n    }\r\n\r\n    // public getTurretPosition(): StartPosition {\r\n    //     const turret: Phaser.Types.Tilemaps.TiledObject = this.tilemap.findObject(\"enemies\", playerObject => playerObject.name === \"turret\");\r\n    //     const position: StartPosition = {x: turret.x, y: turret.y};\r\n    //     return position;\r\n    // }\r\n\r\n    // public getRadarPosition(): StartPosition {\r\n    //     const radar: Phaser.Types.Tilemaps.TiledObject = this.tilemap.findObject(\"enemies\", playerObject => playerObject.name === \"radar\");\r\n    //     const position: StartPosition = {x: radar.x, y: radar.y};\r\n    //     return position;\r\n    // }\r\n\r\n    public getBasePosition(baseNumber: number): StartPosition {\r\n        const base: Phaser.Types.Tilemaps.TiledObject = this.tilemap.findObject(this._level + \"enemies\", playerObject => playerObject.name === `base_${baseNumber}`);\r\n        const position: StartPosition = {x: base?.x, y: base?.y};\r\n        return position;\r\n    }\r\n\r\n    getTileFriction(vehicle: Phaser.GameObjects.Sprite): number {\r\n        for (const roadType in FRICTIONS) {\r\n            // match different road`s types where the car is running now\r\n            // if it`s in ROADS_FRICTION, return appropriate road`s type\r\n            // important!!! road`s types have to match exactly with layers` names in the map\r\n            const tile: Phaser.Tilemaps.Tile = this.tilemap.getTileAtWorldXY(vehicle.x, vehicle.y, false, this._scene.cameras.main, this._level + roadType);\r\n            if (tile) return FRICTIONS[roadType];\r\n        }    \r\n        // if it`s not -> return GRASS_FRICTION\r\n        return GROUND_FRICTION;\r\n    }\r\n\r\n    public checkPlayersPosition(radar: Radar, playersTank: Phaser.GameObjects.Sprite): boolean {\r\n        if (radar.active && playersTank.active) {\r\n            return this.isInDefenceArea(playersTank);\r\n        } else if (!radar.active && playersTank.active) {\r\n            return this.isInBaseArea(playersTank);\r\n        } else return false;\r\n    }\r\n\r\n    private isInDefenceArea(playersTank: Phaser.GameObjects.Sprite): boolean {\r\n        // check if player is in the defence area or not\r\n        if (playersTank.active) return this._defenceArea.contains(playersTank.x, playersTank.y);\r\n    }\r\n\r\n    private isInBaseArea(playersTank: Phaser.GameObjects.Sprite): boolean {\r\n        // check if player is in the base area or not\r\n        if (playersTank.active) return this._baseArea.contains(playersTank.x, playersTank.y);\r\n    }\r\n}","import { BANG_ANIMATION, StartPosition } from \"../../utils/utils\";\r\n\r\nexport default class BangAnimation extends Phaser.GameObjects.Sprite {\r\n    private _scene: Phaser.Scene = null;\r\n    \r\n    constructor(scene: Phaser.Scene, position: StartPosition, textureType: string) {\r\n        super(scene, position.x, position.y, textureType);\r\n        this._scene = scene;\r\n        this._scene.add.existing(this);\r\n        this.bangAnimation();\r\n    }\r\n\r\n    private bangAnimation(): void {\r\n        this.play(BANG_ANIMATION);\r\n        this.once(Phaser.Animations.Events.ANIMATION_COMPLETE, () => this.destroy(), this);\r\n    }\r\n\r\n    public static generateBang(scene: Phaser.Scene, position: StartPosition): void {\r\n        new BangAnimation(scene, position, \"explosion1\");\r\n    }\r\n}","import { SPARKLE_ANIMATION, StartPosition } from \"../../utils/utils\";\r\n\r\nexport default class SparkleAnimation extends Phaser.GameObjects.Sprite {\r\n    private _scene: Phaser.Scene = null;\r\n    \r\n    constructor(scene: Phaser.Scene, position: StartPosition, textureType: string) {\r\n        super(scene, position.x, position.y, textureType);\r\n        this._scene = scene;\r\n        this._scene.add.existing(this);\r\n        this.sparkleAnimation();\r\n    }\r\n\r\n    private sparkleAnimation(): void {\r\n        this.play(SPARKLE_ANIMATION);\r\n        this.once(Phaser.Animations.Events.ANIMATION_COMPLETE, () => this.destroy(), this);\r\n    }\r\n\r\n    public static generateBang(scene: Phaser.Scene, position: StartPosition): void {\r\n        new SparkleAnimation(scene, position, \"sparkle1\");\r\n    }\r\n}","import { ENEMY, StartPosition } from \"../../utils/utils\";\r\nimport Map from \"../Map\";\r\nimport Shell from \"./Shell\";\r\n\r\nexport default class GroupOfShells extends Phaser.Physics.Arcade.Group {\r\n    private _scene: Phaser.Scene = null;\r\n    private _map: Map = null;\r\n    private _texture: string = \"\";\r\n    private _enemy: boolean = false;\r\n    private _direction: number = 1;\r\n    private _nextShoot: number = 0;\r\n    private _pauseBetweenShoots: number = 0;\r\n\r\n    constructor(world: Phaser.Physics.Arcade.World, scene: Phaser.Scene, map: Map, texture: string, enemy: boolean = true) {\r\n        super(world, scene);\r\n        this._scene = scene;\r\n        this._map = map;\r\n        this._texture = texture;\r\n        this._enemy = enemy;\r\n        this._direction = enemy ? 1 : -1;\r\n        this.setPauseBetweenShoots();\r\n    }\r\n\r\n    // mechanism for sprites` reusing for better performance\r\n    public createFire(parentSprite: Phaser.GameObjects.Sprite): void {\r\n        if (this._nextShoot > this._scene.time.now) return; // to prevent toans of fires\r\n\r\n        let shell: Shell = this.getFirstDead();\r\n        const side: number = this._enemy ? -37 : 40;\r\n        \r\n        if (!shell) {\r\n            const vector: Phaser.Math.Vector2 = this._scene.physics.velocityFromAngle(parentSprite.angle + 270, side); // +270 - trick to set shell just before barrel\r\n            const position: StartPosition = { x: parentSprite.x + vector.x, y: parentSprite.y + vector.y };\r\n            shell = new Shell(this._scene, position, \"objects\", this._texture, parentSprite, this._map);\r\n            this.add(shell);\r\n        } else {\r\n            const vector: Phaser.Math.Vector2 = this._scene.physics.velocityFromAngle(parentSprite.angle + 270, side); // +270 - trick to set shell just before barrel\r\n            const position: StartPosition = { x: parentSprite.x + vector.x - 5, y: parentSprite.y + vector.y - 5};\r\n            shell.body.x = position.x;\r\n            shell.body.y = position.y;\r\n            shell.setAlive(true);\r\n        }\r\n        shell.flyOut(this._direction);\r\n\r\n        this._nextShoot = this._scene.time.now + this._pauseBetweenShoots; // instead one fire per 0.5 second\r\n    }\r\n\r\n    private setPauseBetweenShoots(): void {\r\n        switch (this._texture) {\r\n            case ENEMY.TANK.SHELL_TYPE:\r\n                this._pauseBetweenShoots = 1200; // enemy`s tank\r\n                break;\r\n            case ENEMY.BMP.SHELL_TYPE:\r\n                this._pauseBetweenShoots = 600; // enemy`s BMP\r\n                break;\r\n            case ENEMY.BTR.SHELL_TYPE:\r\n                this._pauseBetweenShoots = 300; // enemy`s BTR\r\n                break;\r\n            case \"bulletRed1\":\r\n                this._pauseBetweenShoots = 400; // player`s BMP\r\n                break;\r\n            case \"bulletRed2\":\r\n                this._pauseBetweenShoots = 800; // player`s tank\r\n                break;\r\n        }\r\n    }\r\n}","import { StartPosition, SPEED, ENEMY, PLAYER } from \"../../utils/utils\";\r\nimport Map from \"../Map\";\r\n\r\nexport default class Shell extends Phaser.GameObjects.Sprite {\r\n    private _scene: Phaser.Scene = null;\r\n    private _parentSprite: Phaser.GameObjects.Sprite = null;\r\n    private _map: Map = null;\r\n    private _shellSpeed: number = 0;\r\n    private _shellPower: number = 0;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, atlasName: string, textureName: string, parentSprite: Phaser.GameObjects.Sprite, map: Map) {\r\n        super(scene, position.x, position.y, atlasName, textureName);\r\n        this._scene = scene;\r\n        this._parentSprite = parentSprite;\r\n        this._map = map;\r\n        this.init(textureName);\r\n        this._scene.events.on(\"update\", this.update, this);\r\n    }\r\n\r\n    protected init(textureName: string) {\r\n        this._scene.add.existing(this); // add sprite to the scene\r\n        this._scene.physics.add.existing(this); // add sprite as physic object to Phaser engine\r\n        this.body.enable = true; // the physic body of \"dragon\" will be available for physic impacts\r\n\r\n        switch (textureName) {\r\n            case ENEMY.BTR.SHELL_TYPE:\r\n                this._shellSpeed = SPEED.FASTER;\r\n                this._shellPower = ENEMY.BTR.SHELL_POWER;\r\n                break;\r\n            case ENEMY.BMP.SHELL_TYPE:\r\n                this._shellSpeed = SPEED.FASTER;\r\n                this._shellPower = ENEMY.BMP.SHELL_POWER;\r\n                break;\r\n            case ENEMY.TANK.SHELL_TYPE:\r\n                this._shellSpeed = SPEED.FASTER;\r\n                this._shellPower = ENEMY.TANK.SHELL_POWER;\r\n                break;\r\n            case PLAYER.BMP.SHELL_TYPE:\r\n                this._shellSpeed = SPEED.FASTEST;\r\n                this._shellPower = PLAYER.BMP.SHELL_POWER;\r\n                break;\r\n            case PLAYER.TANK.SHELL_TYPE:\r\n                this._shellSpeed = SPEED.FASTEST;\r\n                this._shellPower = PLAYER.TANK.SHELL_POWER;\r\n                break;\r\n        }\r\n    }\r\n\r\n    public get damage(): number {\r\n        return this._shellPower;\r\n    }\r\n\r\n    // check if shell is out of boarders\r\n    public update(): void {\r\n        if (this.active && (this.body.x < -20 ||\r\n            this.body.x > this._map.tilemap.widthInPixels + 20 ||\r\n            this.body.y < -20 ||\r\n            this.body.y > this._map.tilemap.heightInPixels + 20)) this.setAlive(false);\r\n    }\r\n\r\n    public setAlive(status: boolean): void {\r\n        this.body.enable = status;\r\n        this.setVisible(status);\r\n        this.setActive(status);\r\n    }\r\n\r\n    // direction has to be among 1 and -1. 1 for enemies, -1 for player\r\n    public flyOut(direction: number) {\r\n        const vector: Phaser.Math.Vector2 = new Phaser.Math.Vector2();\r\n        vector.setToPolar(this._parentSprite.rotation + (direction * Math.PI / 2)); // (this._tank.vehicle.rotation - Math.PI) - correct side from where shell throws, 30 - distance from tank`s core and shell\r\n        this.angle = this._parentSprite.angle; // tank and shell sprites should be on the same direction\r\n        this.body.setVelocity(vector.x * this._shellSpeed, vector.y * this._shellSpeed);\r\n    }\r\n}","import { StartPosition } from \"../../utils/utils\";\r\nimport Map from \"../Map\";\r\n\r\nexport default class Vehicle extends Phaser.GameObjects.Sprite {\r\n    protected _scene: Phaser.Scene = null;\r\n    protected _map: Map = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, atlasName: string, textureName: string, map: Map) {\r\n        super(scene, position.x, position.y, atlasName, textureName);\r\n        this._scene = scene;\r\n        this._map = map;\r\n        this.init();\r\n    }\r\n    \r\n    protected init() {\r\n        this._scene.add.existing(this); // add sprite to the scene\r\n        this._scene.physics.add.existing(this); // add sprite as physic object to Phaser engine\r\n        this.body.enable = true; // the physic body of \"dragon\" will be available for physic impacts\r\n    }\r\n\r\n    public fire(): void {}\r\n}","import { StartPosition, DIRECTION, ENEMY } from \"../../../utils/utils\";\r\nimport BangAnimation from \"../../animation/BangAnimation\";\r\nimport Map from \"../../Map\";\r\nimport Player from \"../player/Player\";\r\nimport GroupOfShells from \"../../shells/GroupOfShells\";\r\nimport Shell from \"../../shells/Shell\";\r\nimport SparkleAnimation from \"../../animation/SparkleAnimation\";\r\nimport Vehicle from \"../Vehicle\";\r\n\r\nexport default class EnemyVehicle extends Vehicle {\r\n    private _vehicleSpeed: number = 0;\r\n    private _type: string = \"\";\r\n    private _armour: number = 0;\r\n    private _timer: Phaser.Time.TimerEvent = null;\r\n    private _player: Player = null;\r\n    private _groupOfShells: GroupOfShells;\r\n    public isAppear: boolean = true;\r\n    public direction: string = DIRECTION.DOWN;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, atlasName: string, textureName: string, map: Map, player: Player) {\r\n        super(scene, position, atlasName, textureName, map);\r\n\r\n        const shellType: string = this.setEnemiesType(textureName);\r\n        this._groupOfShells = new GroupOfShells(this._scene.physics.world, this._scene, this._map, shellType);\r\n        this._timer = this._scene.time.addEvent({\r\n            delay: 4000, // appearing time of next enemy\r\n            loop: true,\r\n            callback: this.changeDirection,\r\n            callbackScope: this\r\n        });\r\n\r\n        this._player = player;\r\n        this.direction = DIRECTION.DOWN;\r\n        // enemy shoots player and boxes\r\n        this._scene.physics.add.overlap(this._player, this._groupOfShells, this.shellsPlayerCollision, null, this);\r\n        // enemy shoots boxes\r\n        this._scene.physics.add.overlap(this._map.explosiveObjects, this._groupOfShells, this.shellsBoxesCollision, null, this);\r\n        this._scene.physics.add.overlap(this._map.stones, this._groupOfShells, this.shellsStoneCollision, null, this);\r\n        this._scene.events.on(\"update\", this.fire, this);\r\n    }\r\n\r\n    private setEnemiesType(textureName: string): string {\r\n        switch (textureName) {\r\n            case \"enemy_btr\": // enemy BTR\r\n                this._type = ENEMY.BTR.TYPE;\r\n                this._vehicleSpeed = ENEMY.BTR.SPEED;\r\n                this._armour = ENEMY.BTR.ARMOUR;\r\n                return ENEMY.BTR.SHELL_TYPE;\r\n            case \"enemy\": // enemy BMP\r\n                this._type = ENEMY.BMP.TYPE;\r\n                this._vehicleSpeed = ENEMY.BMP.SPEED;\r\n                this._armour = ENEMY.BMP.ARMOUR;\r\n                return ENEMY.BMP.SHELL_TYPE;\r\n            case \"enemy_tank\": // enemy tank\r\n                this._type = ENEMY.TANK.TYPE;\r\n                this._vehicleSpeed = ENEMY.TANK.SPEED;\r\n                this._armour = ENEMY.TANK.ARMOUR;\r\n                return ENEMY.TANK.SHELL_TYPE;\r\n        }\r\n    }\r\n\r\n    public destroyEnemy(shell: Shell): boolean {\r\n        this._armour -= shell.damage;\r\n\r\n        switch (this._type) {\r\n            case ENEMY.TANK.TYPE:\r\n                if ((this._armour < 150) && (this._armour >= 80)) {\r\n                    this.setTexture(\"objects\", \"enemy_tank1\");\r\n                } else if ((this._armour < 80) && (this._armour > 0)) {\r\n                    this.setTexture(\"objects\", \"enemy_tank2\");\r\n                } else if (this._armour <= 0) {\r\n                    this._scene.events.off(\"update\", this.fire, this);\r\n                    this.destroy();\r\n                    return true;\r\n                }\r\n                break;\r\n            case ENEMY.BMP.TYPE:\r\n                if ((this._armour <= 35) && (this._armour > 0)) {\r\n                    this.setTexture(\"objects\", \"enemy_bmp1\");\r\n                } else if (this._armour <= 0) {\r\n                    this._scene.events.off(\"update\", this.fire, this);\r\n                    this.destroy();\r\n                    return true;\r\n                }       \r\n                break;\r\n            case ENEMY.BTR.TYPE:\r\n                if ((this._armour <= 26) && (this._armour > 0)) {\r\n                    this.setTexture(\"objects\", \"enemy_btr1\");\r\n                } else if (this._armour <= 0) {\r\n                    this._scene.events.off(\"update\", this.fire, this);\r\n                    this.destroy();\r\n                    return true;\r\n                }       \r\n                break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public get velocity(): number {\r\n        return this.getMaxSpeed();\r\n    }\r\n\r\n    protected getMaxSpeed(): number {\r\n        return this._vehicleSpeed * this._map.getTileFriction(this);\r\n    }\r\n\r\n    public changeDirection(): void {\r\n        if (this.isAppear) this.isAppear = false; // first time to allow enemy tank to move out\r\n        const [x, y, angle] = this.getVehiclesDirection();\r\n        this.body?.setVelocity(x, y); // set direction\r\n        this.angle = angle; // set correct sprite`s angle\r\n    }\r\n\r\n    private getVehiclesDirection(): [number, number, number] { // x, y, angle\r\n        const direction: number = Math.floor(Math.random() * 4) + 1; // get random value between 1 and 4\r\n        switch (direction) {\r\n            case 1:\r\n                this.direction = DIRECTION.UP;\r\n                return [0, -this.velocity, 180]; // go up\r\n            case 2:\r\n                this.direction = DIRECTION.RIGHT;\r\n                return [this.velocity, 0, -90]; // go right\r\n            case 3:\r\n                this.direction = DIRECTION.DOWN;\r\n                return [0, this.velocity, 0]; // go down\r\n            case 4:\r\n                this.direction = DIRECTION.LEFT;\r\n                return [-this.velocity, 0, 90]; // go left\r\n            default:\r\n                this.direction = DIRECTION.DOWN;\r\n                return [0, this.velocity, 0];\r\n        }\r\n    }\r\n\r\n    public moveOut(): void {\r\n        this.body?.setVelocity(0, this.velocity * 1.3); // * 1.3 - trick to run out quicker\r\n    }\r\n\r\n    public fire(): void {\r\n        if (this._groupOfShells) {\r\n            this._groupOfShells.createFire(this);\r\n        }\r\n        // if enemy comes close enough to player, it will shoot\r\n        if ((this._type !== ENEMY.TANK.TYPE) && (Phaser.Math.Distance.BetweenPoints(this, this._player) < 300) && this.body) {\r\n            this.body.stop();\r\n            const angle = Phaser.Math.Angle.Between(this.x, this.y, this._player.x, this._player.y);\r\n            this.rotation = angle - Math.PI / 2; // Math.PI / 2 - trick to turn tank`s barrel oposite to the player\r\n        } else if ((this._type === ENEMY.TANK.TYPE) && (Phaser.Math.Distance.BetweenPoints(this, this._player) < 500) && this.body) {\r\n            this.body.stop();\r\n            const angle = Phaser.Math.Angle.Between(this.x, this.y, this._player.x, this._player.y);\r\n            this.rotation = angle - Math.PI / 2; // Math.PI / 2 - trick to turn tank`s barrel oposite to the player\r\n        }\r\n    }\r\n\r\n    private shellsPlayerCollision(player: Player, shell: Shell): void {\r\n        const position: StartPosition = { x: player.x, y: player.y };\r\n        BangAnimation.generateBang(this._scene, position);\r\n        shell.setAlive(false);\r\n        player.destroyPlayer(shell);\r\n    }\r\n\r\n    private shellsBoxesCollision(target: Phaser.GameObjects.Sprite, shell: Shell): void {\r\n        const position: StartPosition = { x: target.x, y: target.y };\r\n        BangAnimation.generateBang(this._scene, position);\r\n        shell.setAlive(false);\r\n        target.destroy();\r\n    }\r\n\r\n    private shellsStoneCollision(target: Phaser.GameObjects.Sprite, shell: Shell): void {\r\n        const vector: Phaser.Math.Vector2 = this._scene.physics.velocityFromAngle(shell.angle + 270, -20); // +270 - trick to set sparkle just before the stone\r\n        const position: StartPosition = { x: shell.x + vector.x, y: shell.y + vector.y };\r\n        SparkleAnimation.generateBang(this._scene, position);\r\n        shell.setAlive(false);\r\n    }\r\n}","import Map from \"../../Map\";\r\nimport EnemyVehicle from \"./EnemyVehicle\";\r\nimport { handleDirection, StartPosition } from \"../../../utils/utils\";\r\nimport Player from \"../player/Player\";\r\n\r\nexport default class GroupOfEnemies extends Phaser.Physics.Arcade.Group {\r\n    private _scene: Phaser.Scene = null;\r\n    private _map: Map = null;\r\n    private _timer: Phaser.Time.TimerEvent = null;\r\n    private _enemies: number[] = [];\r\n    private _player: Player = null;\r\n    private _numberOfBase: number = 0;\r\n    public counter: number = 0;\r\n\r\n    constructor(world: Phaser.Physics.Arcade.World, scene: Phaser.Scene, map: Map, enemies: number[], player: Player, numberOfBase: number) {\r\n        super(world, scene);\r\n        this._scene = scene;\r\n        this._map = map;\r\n        this._enemies = enemies;\r\n        this._player = player;\r\n        this._numberOfBase = numberOfBase;\r\n        this._timer = this._scene.time.addEvent({ // add new enemy every 3 seconds\r\n            delay: 3000,\r\n            loop: true,\r\n            callback: this.addEnemy,\r\n            callbackScope: this\r\n        });\r\n        // prevent enemy`s overlapping with each other\r\n        this._scene.physics.add.collider(this, this, this.handleEnemyVehicleCollision, null, this);\r\n    }\r\n\r\n    private addEnemy(): void {\r\n        if (this.counter < 6) { // hold no more than 6 enemies on the map at one time\r\n            this._enemies.length > 0 ? this.createEnemy() : this._timer?.remove();\r\n        }\r\n    }\r\n\r\n    private createEnemy(): void {\r\n        const baseNumber: number = Math.floor(Math.random() * this._numberOfBase) + 1;\r\n        const position: StartPosition = this._map.getBasePosition(baseNumber); // there are two places on the map where enemies appear\r\n        // get last el from array\r\n        // transform el into texture\r\n        // delete last el from array\r\n        // const enemiesTexture: string = this.getEnemyVehicleTexture(this._enemies[this._enemies.length - 1]);\r\n        const enemiesTexture: string = this.getEnemyVehicleTexture(this._enemies.pop());\r\n        const enemy: EnemyVehicle = new EnemyVehicle(this._scene, position, \"objects\", enemiesTexture, this._map, this._player);\r\n        this.add(enemy);\r\n\r\n        enemy.moveOut();\r\n        ++this.counter;\r\n    }\r\n\r\n    private getEnemyVehicleTexture(index: number): string {\r\n        switch (index) {\r\n            case 1:\r\n                return \"enemy_btr\"; // BTR\r\n            case 2:\r\n                return \"enemy\"; // BMP\r\n            case 3:\r\n                return \"enemy_tank\"; // tank\r\n        }\r\n    }\r\n\r\n    private handleEnemyVehicleCollision(firstEnemy: EnemyVehicle, secondEnemy: EnemyVehicle): void {\r\n        handleDirection(firstEnemy);\r\n        handleDirection(secondEnemy);\r\n        firstEnemy.changeDirection();\r\n        secondEnemy.body.stop();\r\n    }\r\n\r\n    // private update(): void {\r\n    //     if (this.children.size > 0) {\r\n    //         const array: EnemyVehicle[] = this.children.getArray() as EnemyVehicle[];\r\n    //         for (let i = 0; i < this.children.size; i++) {\r\n    //             if (!array[i].isAppear && this._map.isInCheckZone(array[i])) {\r\n    //                 array[i].body.y += 30;\r\n    //                 array[i].changeDirection();\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n}","import Vehicle from \"../Vehicle\";\r\nimport Map from \"../../Map\";\r\nimport { PLAYER_SPEED, SPEED, StartPosition, TURNS } from \"../../../utils/utils\";\r\nimport GroupOfShells from \"../../shells/GroupOfShells\";\r\nimport Shell from \"../../shells/Shell\";\r\nimport BangAnimation from \"../../animation/BangAnimation\";\r\nimport SparkleAnimation from \"../../animation/SparkleAnimation\";\r\n\r\nexport default class Player extends Vehicle {\r\n    private _velocity: number;\r\n    private _cursor: Phaser.Types.Input.Keyboard.CursorKeys = null;\r\n    private _armour: number = 0;\r\n    public groupOfShells: GroupOfShells = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, atlasName: string, textureName: string, map: Map, shellTexture: string, enemy: boolean) {\r\n        super(scene, position, atlasName, textureName, map);\r\n        this._velocity = 0;\r\n        this._cursor = this._scene.input.keyboard.createCursorKeys(); // take control from keyboard, exactly up and down keys\r\n        this.groupOfShells = new GroupOfShells(this._scene.physics.world, this._scene, this._map, shellTexture, false);\r\n        this.setVehicleType(textureName);\r\n        // handle shooting on boxes\r\n        this._scene.physics.add.overlap(this._map.explosiveObjects, this.groupOfShells, this.boxesShellsCollision, null, this);\r\n        // handle shooting on stones\r\n        this._scene.physics.add.overlap(this._map.stones, this.groupOfShells, this.stonesShellsCollision, null, this);\r\n    }\r\n\r\n    private setVehicleType(textureName: string): void {\r\n        switch (textureName) {\r\n            case \"player_tank\":\r\n                this._armour = 100;\r\n                break;\r\n            case \"bmp_red\":\r\n                this._armour = 77;\r\n                break;\r\n        }\r\n    }\r\n\r\n    private boxesShellsCollision(box: Phaser.GameObjects.Sprite, shell: Shell): void {\r\n        const position: StartPosition = { x: box.x, y: box.y };\r\n        BangAnimation.generateBang(this._scene, position);\r\n        box.destroy();\r\n        shell.setAlive(false);\r\n    }\r\n\r\n    private stonesShellsCollision(stone: Phaser.GameObjects.Sprite, shell: Shell): void {\r\n        const vector: Phaser.Math.Vector2 = this._scene.physics.velocityFromAngle(shell.angle + 270, +20); // +270 - trick to set sparkle just before the stone\r\n        const position: StartPosition = { x: shell.x + vector.x, y: shell.y + vector.y };\r\n        SparkleAnimation.generateBang(this._scene, position);\r\n        shell.setAlive(false);\r\n    }\r\n\r\n    protected get direction(): number {\r\n        let direction = PLAYER_SPEED.NONE;\r\n\r\n        if (this._cursor.up.isDown) direction = PLAYER_SPEED.FORWARD;\r\n        else if (this._cursor.down.isDown) direction = PLAYER_SPEED.BACKWARD;\r\n        \r\n        return direction;\r\n    }\r\n\r\n    // set the vehicle`s speed\r\n    protected get velocity(): number {\r\n        const vehicleSpeed = Math.abs(this._velocity); // make the speed absolute, without negative meaning\r\n        const maxSpeed = this.getMaxSpeed();\r\n        // if the player clicks on the key Up or Down and\r\n        // current vehicle`s speed is less than max speed (10)\r\n        // increase the vehicle`s speed by multipling acceleration with direction, which can be negative or positive\r\n\r\n        if (this.direction && vehicleSpeed < maxSpeed) {\r\n            this._velocity += this.direction;\r\n        }\r\n        else if ((this.direction && vehicleSpeed > maxSpeed) || (!this.direction && vehicleSpeed > 0)) { // if the player doesn`t click on the key Up or Down and\r\n            this._velocity -= this._velocity; // current vehicle`s speed is more than max speed (10) ->\r\n            // decrease the vehicle`s speed by multipling acceleration with previous direction, which can be negative or positive\r\n        }\r\n        return this._velocity;\r\n    }\r\n\r\n    protected get turn(): number {\r\n        let turn = TURNS.NONE;\r\n\r\n        if (this._cursor.right.isDown) turn = TURNS.RIGHT;\r\n        else if (this._cursor.left.isDown) turn = TURNS.LEFT;\r\n        \r\n        return turn;\r\n    }\r\n\r\n    protected getMaxSpeed(): number {\r\n        return SPEED.BASIC * this._map.getTileFriction(this);\r\n    }\r\n\r\n    // set the vehicle`s angle, when the vehicle is turning to the right or to the left\r\n    public getAngle(): number {\r\n        return this.angle + this.turn;\r\n    }\r\n\r\n    private getVelocityFromAngle(): Phaser.Math.Vector2{ // get sprite`s speed with account of sprite`s angle\r\n        const vector2 = new Phaser.Math.Vector2();\r\n        // vector2 дает нам правильное смещение картинки/спрайта по оси х/у\r\n        // первый параметр - текущий угол картинки (по умолчанию 90 град. то есть вправо). Машинка смотрит вверх, поэтому нужно подправить угол\r\n        // второй параметр - ускорение картинки (положительное/отрицатильное). То есть или вперед, или назад\r\n        return vector2.setToPolar(this.rotation - Math.PI/2, this.velocity);\r\n    }\r\n\r\n    public fire(): void {\r\n        if (this.groupOfShells) {\r\n            this.groupOfShells.createFire(this);\r\n        }\r\n    }\r\n\r\n    public move(): void {\r\n        // the vehicle is moving with account of turn`s angle\r\n        this.setAngle(this.getAngle());\r\n        const velocity = this.getVelocityFromAngle();\r\n        this.body?.setVelocity(velocity.x, velocity.y);\r\n\r\n        if (this._cursor.space.isDown && this) this.fire();\r\n    }\r\n\r\n    public setAlive(status: boolean): void {\r\n        this.body.enable = status;\r\n        this.setVisible(status);\r\n        this.setActive(status);\r\n    }\r\n\r\n    public destroyPlayer(shell: Shell): void {\r\n        this._armour -= shell.damage;\r\n        if ((this._armour < 100) && (this._armour >= 50)) {\r\n            this.setTexture(\"objects\", \"player_tank1\");\r\n        } else if ((this._armour < 50) && (this._armour > 0)) {\r\n            this.setTexture(\"objects\", \"player_tank2\");\r\n        } else if (this._armour <= 0) {\r\n            this.destroy();\r\n        }\r\n    }\r\n}","import BootScene from \"./scenes/BootScene\";\r\nimport PreloadScene from \"./scenes/PreloadScene\";\r\nimport Level_1 from \"./scenes/Level_1\";\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: window.innerWidth, // set according to background image size / map`s size!!!\r\n    height: window.innerHeight, // set according to background image size / map`s size!!!\r\n    scene: [\r\n        new BootScene(),\r\n        new PreloadScene(),\r\n        // new StartScene(),\r\n        new Level_1()\r\n    ],\r\n    scale: {\r\n        mode: Phaser.Scale.FIT, // auto scaling of all sprites\r\n        autoCenter: Phaser.Scale.CENTER_BOTH // canvas centering in the center of the screen\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: { debug: false} // if true -> shows objects` frames\r\n        // default: \"matter\",\r\n        // matter: {\r\n        //     debug: false,\r\n        //     gravity: { x: 0, y: 0 }\r\n        // }\r\n    }\r\n};\r\n\r\nconst game = new Phaser.Game(config);","export default class BootScene extends Phaser.Scene {\r\n    constructor() {super({key: \"boot-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.load.image(\"background\", \"assets/images/background.png\");\r\n    }\r\n\r\n    protected create(): void {\r\n        this.scene.start(\"preload-scene\");\r\n    }\r\n}","import BangAnimation from \"../classes/animation/BangAnimation\";\r\nimport Map from \"../classes/Map\";\r\nimport Player from \"../classes/vehicles/player/Player\";\r\nimport Shell from \"../classes/shells/Shell\";\r\nimport { BANG_ANIMATION, handleDirection, SPARKLE_ANIMATION, StartPosition } from \"../utils/utils\";\r\nimport GroupOfEnemies from \"../classes/vehicles/enemies/GroupOfEnemies\";\r\nimport EnemyVehicle from \"../classes/vehicles/enemies/EnemyVehicle\";\r\n\r\nexport default class Level_1 extends Phaser.Scene {\r\n    private _map: Map = null;\r\n    private _player1: Player = null;\r\n    private _enemies: GroupOfEnemies = null;\r\n    \r\n    constructor() {super({key: \"level-1\"});}\r\n\r\n    protected preload(): void {\r\n        this.add.sprite(0, 0, \"background\").setOrigin(0);\r\n        this.loadAnimation();\r\n    }\r\n\r\n    protected create(): void {\r\n        this._map = new Map(this, 1);\r\n        // add player\r\n        const player = this._map.getPlayer();\r\n        const position: StartPosition = {x: player.x, y: player.y};\r\n        this._player1 = new Player(this, position, \"objects\", \"player_tank\", this._map, \"bulletRed2\", false);\r\n\r\n        // add all enemies 1 - enemy BTR, 2 - enemy BMP, 3 - enemy tank, count reverse! number of bases on each level is different!!!\r\n        this._enemies = new GroupOfEnemies(this.physics.world, this, this._map, [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1], this._player1, 4);\r\n        this.handleCollisions();\r\n        this._map.createTreesLayer(); // make player and enemies under trees\r\n        \r\n        this.cameras.main.setBounds(0, 0, this._map.tilemap.widthInPixels, this._map.tilemap.heightInPixels); // set map`s bounds as camera`s bounds\r\n        this.cameras.main.startFollow(this._player1); // set camera to center on the player`s tank\r\n    }\r\n\r\n    private handleCollisions(): void {\r\n        // player shoots all enemies\r\n        // this.physics.add.overlap([this._turret.platform, this._radar], this._player1.groupOfShells, this.shellsEnemiesCollision, null, this);\r\n        this.physics.add.overlap(this._enemies, this._player1.groupOfShells, this.shellsEnemiesCollision, null, this);\r\n\r\n        // handle enemies vs simple collision (not move objects)\r\n        this.physics.add.collider([this._player1, ...this._map.explosiveObjects, ...this._map.stones], this._enemies, this.handleEnemiesCollision, null, this);\r\n        this.physics.add.collider([...this._enemies.children.getArray(), ...this._map.explosiveObjects, ...this._map.stones], this._player1, this.handlePlayerCollision, null, this);\r\n    }\r\n\r\n    private shellsEnemiesCollision(enemy: EnemyVehicle, shell: Shell): void {\r\n        const position: StartPosition = { x: enemy.x, y: enemy.y };\r\n        BangAnimation.generateBang(this, position);\r\n        if (enemy.destroyEnemy(shell)) {\r\n            --this._enemies.counter;\r\n        }\r\n        // if (enemy instanceof Radar) {\r\n        //     this._radar.destroy();\r\n        // } else if (enemy.frame.name === \"platform\") {\r\n        //     this._turret.destroyTurret(shell);\r\n        // } else if (enemy instanceof EnemyVehicle) {\r\n        //     if (enemy.destroyEnemy(shell)) {\r\n        //         --this._enemies.counter;\r\n        //     }\r\n        // }\r\n        \r\n        shell.setAlive(false);\r\n    }\r\n\r\n    private handleEnemiesCollision(gameObject: Phaser.GameObjects.Sprite, enemy: EnemyVehicle): void {\r\n        handleDirection(enemy);\r\n        enemy.changeDirection();\r\n    }\r\n\r\n    private handlePlayerCollision(gameObject: Phaser.GameObjects.Sprite, player: Player): void {\r\n        player.body.stop();\r\n    }\r\n\r\n    // see docs -> Scene.Methods\r\n    update(time: number, delta: number): void {\r\n        if (this._player1.active) this._player1.move();\r\n        // if (this._turret.turret && this._player1.active) {\r\n        //     const isPlayerNear: boolean = this._map.checkPlayersPosition(this._radar, this._player1);\r\n        //     this._turret.runTurret(this._player1, isPlayerNear);\r\n        // }\r\n        this.checkMapBounds([this._player1, ...this._enemies.getChildren()]);\r\n    }\r\n\r\n    // private getVehicleConfig(): any {\r\n    //     // config for the first player\r\n    //     let config: any = { player1: TANKS.RED, player2: TANKS.BLUE };\r\n    //     // if (this._client && !this._client._isFirst) {\r\n    //     //     // config for the second player\r\n    //     //     config = { player1: CARS.BLUE, player2: CARS.RED };\r\n    //     // }\r\n    //     return config;\r\n    // }\r\n\r\n    private checkMapBounds(vehicles: Phaser.GameObjects.GameObject[]): void {\r\n        if (vehicles && vehicles.length > 0) {\r\n            for (let i = 0; i < vehicles.length; i++) {\r\n                if (!vehicles[i].body) continue;\r\n        \r\n                if (vehicles[i].body.y > this._map.tilemap.heightInPixels - 30) {\r\n                    vehicles[i].body.y = this._map.tilemap.heightInPixels - 30 - 20;\r\n                }\r\n                if (vehicles[i].body.y < 0) {\r\n                    vehicles[i].body.y = 20;\r\n                }\r\n                if (vehicles[i].body.x < 0) {\r\n                    vehicles[i].body.x = 20;\r\n                }\r\n                if (vehicles[i].body.x > this._map.tilemap.widthInPixels - 30) {\r\n                    vehicles[i].body.x = this._map.tilemap.widthInPixels - 30 - 20;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadAnimation(): void {\r\n        // to garantee safe and correct loading of animation\r\n        const bangFrames: Phaser.Types.Animations.AnimationFrame[] = this.anims.generateFrameNames(\"objects\", {\r\n            prefix: \"explosion\",\r\n            start: 1,\r\n            end: 5\r\n        });\r\n        this.anims.create({\r\n            key: BANG_ANIMATION,\r\n            frames: bangFrames,\r\n            frameRate: 5,\r\n            duration: 800, // miliseconds\r\n            repeat: 0, // to play animation only once\r\n        });\r\n\r\n        // const frames: Phaser.Types.Animations.AnimationFrame[] = this.anims.generateFrameNames(\"objects\", {\r\n        //     prefix: \"platform\",\r\n        //     start: 1,\r\n        //     end: 8\r\n        // });\r\n        // this.anims.create({\r\n        //     key: RADAR_ANIMATION,\r\n        //     frames: frames,\r\n        //     frameRate: 7,\r\n        //     duration: 1000, // miliseconds\r\n        //     repeat: -1, // to play animation infinitely\r\n        // });\r\n\r\n        const sparkleFrame: Phaser.Types.Animations.AnimationFrame[] = this.anims.generateFrameNames(\"objects\", {\r\n            prefix: \"sparkle\",\r\n            start: 1,\r\n            end: 1\r\n        });\r\n        this.anims.create({\r\n            key: SPARKLE_ANIMATION,\r\n            frames: sparkleFrame,\r\n            frameRate: 7,\r\n            duration: 350, // miliseconds\r\n            repeat: 0, // to play animation only once\r\n        });\r\n    }\r\n}","import { LoadingBar } from \"../utils/LoadingBar\";\r\n\r\nexport default class PreloadScene extends Phaser.Scene {\r\n    constructor() {super({key: \"preload-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.add.sprite(0, 0, \"background\").setOrigin(0);\r\n        new LoadingBar(this);\r\n\r\n        // load images as a tileset\r\n        this.load.spritesheet(\"tileset\", \"assets/images/tilemap.png\", { frameWidth: 64, frameHeight: 64, margin: 0, spacing: 0 });\r\n        this.load.tilemapTiledJSON(\"tilemap\", \"assets/images/tilemap.json\");\r\n        this.load.atlas(\"objects\", \"assets/images/objects.png\", \"assets/images/objects.json\");\r\n    }\r\n\r\n    protected create(): void {\r\n        this.scene.start(\"level-1\");\r\n    }\r\n}","export class LoadingBar {\r\n    private scene: Phaser.Scene;\r\n    private style: any;\r\n    private progressBox: Phaser.GameObjects.Graphics;\r\n    private progressBar: Phaser.GameObjects.Graphics;\r\n\r\n    constructor(scene: Phaser.Scene) {\r\n        this.scene = scene;\r\n        this.style = {\r\n            boxColor: 0xD3D3D3,\r\n            barColor: 0xFFF8DC,\r\n            x: (this.scene.game.config.width) as number / 2 - 450,\r\n            y: (this.scene.game.config.height) as number / 2 + 250,\r\n            width: 900,\r\n            height: 25\r\n        };\r\n        this.progressBox = new Phaser.GameObjects.Graphics(this.scene);\r\n        this.progressBox = this.scene.add.graphics();\r\n        this.progressBar = this.scene.add.graphics();\r\n\r\n        this.showProgressBox();\r\n        this.setEvents();\r\n    }\r\n\r\n    setEvents() {\r\n        this.scene.load.on(\"progress\", this.showProgressBar, this);\r\n        this.scene.load.on(\"complete\", this.onLoadComplete, this);\r\n    }\r\n\r\n    showProgressBox() {\r\n        this.progressBox\r\n            .fillStyle(this.style.boxColor) // grey color\r\n            .fillRect(this.style.x, this.style.y, this.style.width, this.style.height);\r\n    }\r\n\r\n    showProgressBar(value: number) {\r\n        this.progressBar\r\n            .clear()\r\n            .fillStyle(this.style.barColor) // yellow color\r\n            .fillRect(this.style.x, this.style.y, this.style.width * value, this.style.height);\r\n    }\r\n\r\n    onLoadComplete() {\r\n        this.progressBox.destroy();\r\n        this.progressBar.destroy();\r\n    }\r\n}","import EnemyVehicle from \"../classes/vehicles/enemies/EnemyVehicle\";\r\n\r\nexport enum PLAYER_SPEED {\r\n    NONE = 0,\r\n    FORWARD = 100,\r\n    BACKWARD = -100\r\n};\r\n\r\nexport enum TURNS {\r\n    NONE = 0,\r\n    RIGHT = 1,\r\n    LEFT = -1\r\n};\r\n\r\nexport enum SPEED {\r\n    BASIC = 150,\r\n    FASTER = 690, // enemy shell`s speed\r\n    FASTEST = 1000 // player shell`s speed\r\n};\r\n\r\nexport const GROUND_FRICTION = 0.5;\r\nexport const FRICTIONS = {\r\n    \"lake\": 0,\r\n    \"road\": 1\r\n};\r\n\r\nexport const TANKS = {\r\n    RED: {\r\n        sprite: \"tank_red\",\r\n        position: \"player\"\r\n    },\r\n    BLUE: {\r\n        sprite: \"tank_green\",\r\n        position: \"player\"\r\n    }\r\n};\r\n\r\nexport type StartPosition = {\r\n    x: number,\r\n    y: number\r\n};\r\n\r\nexport const BANG_ANIMATION: string = \"BANG_ANIMATION\";\r\nexport const RADAR_ANIMATION: string = \"RADAR_ANIMATION\";\r\nexport const SPARKLE_ANIMATION: string = \"SPARKLE_ANIMATION\";\r\nexport const SHOOTING_ANIMATION: string = \"SHOOTING_ANIMATION\";\r\n\r\nexport default class Checkpoint extends Phaser.Geom.Rectangle{\r\n    public index: string;\r\n    constructor(x: number, y: number, width: number, height: number) {\r\n        super(x, y, width, height);\r\n    }\r\n}\r\n\r\nexport enum DIRECTION {\r\n    RIGHT = \"RIGHT\",\r\n    DOWN = \"DOWN\",\r\n    LEFT = \"LEFT\",\r\n    UP = \"UP\"\r\n};\r\n\r\nexport const ENEMY = {\r\n    TANK: {\r\n        TYPE: \"TANK\",\r\n        SPEED: 60,\r\n        ARMOUR: 150,\r\n        SHELL_POWER: 45,\r\n        SHELL_TYPE: \"bulletDark3\"\r\n    },\r\n    BMP: {\r\n        TYPE: \"BMP\",\r\n        SPEED: 120,\r\n        ARMOUR: 70,\r\n        SHELL_POWER: 26,\r\n        SHELL_TYPE: \"bulletDark2\"\r\n    },\r\n    BTR: {\r\n        TYPE: \"BTR\",\r\n        SPEED: 190,\r\n        ARMOUR: 56,\r\n        SHELL_POWER: 13,\r\n        SHELL_TYPE: \"bulletDark1\"\r\n    },\r\n    TURRET: {\r\n        ARMOUR: 200,\r\n        SHELL_POWER: 45,\r\n        SHELL_TYPE: \"bulletDark3\"\r\n    }\r\n};\r\n\r\nexport const PLAYER = {\r\n    TANK: {\r\n        // SPEED: 60,\r\n        ARMOUR: 100,\r\n        SHELL_POWER: 60,\r\n        SHELL_TYPE: \"bulletRed2\"\r\n    },\r\n    BMP: {\r\n        // SPEED: 120,\r\n        ARMOUR: 77,\r\n        SHELL_POWER: 30,\r\n        SHELL_TYPE: \"bulletRed1\"\r\n    },\r\n};\r\n\r\nexport function handleDirection(enemy: EnemyVehicle): void {\r\n    switch (enemy.direction) {\r\n        case DIRECTION.DOWN:\r\n            enemy.body.y -= 10;\r\n            break;\r\n        case DIRECTION.LEFT:\r\n            enemy.body.x += 10;\r\n            break;\r\n        case DIRECTION.UP:\r\n            enemy.body.y += 10;\r\n            break;\r\n        case DIRECTION.RIGHT:\r\n            enemy.body.x -= 10;\r\n            break;\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/game.ts\");\n",""],"names":[],"sourceRoot":""}