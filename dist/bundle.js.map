{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://battle_city/./src/classes/BangAnimation.ts","webpack://battle_city/./src/classes/GroupOfShells.ts","webpack://battle_city/./src/classes/Map.ts","webpack://battle_city/./src/classes/Player.ts","webpack://battle_city/./src/classes/Shell.ts","webpack://battle_city/./src/classes/Turret.ts","webpack://battle_city/./src/classes/Vehicle.ts","webpack://battle_city/./src/game.ts","webpack://battle_city/./src/scenes/BootScene.ts","webpack://battle_city/./src/scenes/GameScene.ts","webpack://battle_city/./src/scenes/PreloadScene.ts","webpack://battle_city/./src/utils/LoadingBar.ts","webpack://battle_city/./src/utils/utils.ts","webpack://battle_city/webpack/bootstrap","webpack://battle_city/webpack/before-startup","webpack://battle_city/webpack/startup","webpack://battle_city/webpack/after-startup"],"sourcesContent":["import { BANG_ANIMATION, StartPosition } from \"../utils/utils\";\r\n\r\nexport default class BangAnimation extends Phaser.GameObjects.GameObject {\r\n    private _scene: Phaser.Scene = null;\r\n    private _sprite: Phaser.Physics.Matter.Sprite = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition) {\r\n        super(scene, \"objects\");\r\n        this._scene = scene;\r\n        this._sprite = this._scene.matter.add.sprite(position.x, position.y, \"objects\", \"explosion1\");\r\n        this._sprite.setSensor(true);\r\n        this.bangAnimation();\r\n    }\r\n\r\n    private bangAnimation(): void {\r\n        this._sprite.play(BANG_ANIMATION);\r\n        this._sprite.once(Phaser.Animations.Events.ANIMATION_COMPLETE, function () {\r\n            this._sprite.destroy();\r\n            this.destroy();\r\n        }, this);\r\n    }\r\n\r\n    public static generateBang(scene: Phaser.Scene, position: StartPosition): void {\r\n        new BangAnimation(scene, position);\r\n    }\r\n}","import Map from \"./Map\";\r\nimport Shell from \"./Shell\";\r\n\r\nexport default class GroupOfShells extends Phaser.GameObjects.Group {\r\n    private _scene: Phaser.Scene = null;\r\n    private _parentSprite: Phaser.Physics.Matter.Sprite = null;\r\n    private _map: Map = null;\r\n    private _texture: string = \"\";\r\n    private _enemy: number = 1;\r\n    private _nextShoot: number = 0;\r\n\r\n    constructor(scene: Phaser.Scene, parentSprite: Phaser.Physics.Matter.Sprite, map: Map, texture: string, enemy: boolean = true) {\r\n        super(scene);\r\n        this._scene = scene;\r\n        this._parentSprite = parentSprite;\r\n        this._map = map;\r\n        this._texture = texture;\r\n        this._enemy = enemy ? 1 : -1;\r\n    }\r\n\r\n    // mechanism for sprites` reusing for better performance\r\n    public createFire(): void {\r\n        if (this._nextShoot > this._scene.time.now) return; // to prevent toans of fires\r\n\r\n        let shell: Shell = this.getFirstDead();\r\n        \r\n        if (!shell) {\r\n            shell = new Shell(this._scene, this._parentSprite, this._map, this._texture);\r\n            this.add(shell);\r\n        } else {\r\n            shell.reset();\r\n        }\r\n        shell.flyOut(this._enemy);\r\n\r\n        this._nextShoot = this._scene.time.now + 500; // instead one fire per 0.5 second\r\n    }\r\n}","import { GROUND_FRICTION, ROADS_FRICTION, StartPosition } from \"../utils/utils\";\r\n\r\nexport default class Map {\r\n    private _scene: Phaser.Scene = null;\r\n    private _tileset: Phaser.Tilemaps.Tileset = null;\r\n    public tilemap: Phaser.Tilemaps.Tilemap = null;\r\n\r\n    constructor(scene: Phaser.Scene) {\r\n        this._scene = scene;\r\n        this.init();\r\n        this.create();\r\n    }\r\n\r\n    init(): void {\r\n        // create a tilemap object\r\n        this.tilemap = this._scene.make.tilemap({ key: \"tilemap\" });\r\n        // add images to tilemap\r\n        // 1 param look in \"tilemap.json\" prop tilesets - name\r\n        this._tileset = this.tilemap.addTilesetImage(\"tilemap\", \"tileset\", 64, 64, 0, 0);\r\n    }\r\n\r\n    create(): void {\r\n        this.createLayers();\r\n        this.createCollisions();\r\n        // this.createChekpoints();\r\n    }\r\n    \r\n    private createLayers(): void {\r\n        // create 2 layers\r\n        this.tilemap.createLayer(\"ground\", this._tileset);\r\n        this.tilemap.createLayer(\"road\", this._tileset);\r\n    }\r\n\r\n    private createCollisions(): void {\r\n        // first param - name of object`s layer in tilemap\r\n        // second param - callback function, which called for every image in tileset\r\n        this.tilemap.findObject(\"collisions\", collisionObject => {\r\n            // with the help of 'matter' engine we add every image to the scene\r\n\r\n            // we have to cast implicitly\r\n            // collisionObject - GameObject, but we need Sprite!\r\n            const castedObject = collisionObject as Phaser.Physics.Matter.Sprite;\r\n            const sprite: Phaser.Physics.Matter.Sprite = this._scene.matter.add.sprite(\r\n                castedObject.x + castedObject.width / 2, // with the help of this trick\r\n                castedObject.y - castedObject.height / 2, // we fixed incorrect displacement (смещение) of sprites on the map\r\n                \"objects\", // key from 'PreloadScene -> this.load.atlas(\"objects\"...'\r\n                collisionObject.name // it`s to distinct each item in objects image collection\r\n            );\r\n            sprite.setStatic(true); // make the sprite static physical object\r\n        });\r\n    }\r\n\r\n    createChekpoints(): void {\r\n        // // get all game objects with name \"checkpoint\"\r\n        // const array: Phaser.Types.Tilemaps.TiledObject[] = this.tilemap.filterObjects(\"checkpoints\", checkpoint => checkpoint.name === \"checkpoint\");\r\n        // // fill this._chekpoints-array with rectangle objects\r\n        // array.forEach(item => {\r\n        //     const rectangle: Checkpoint = new Checkpoint(item.x, item.y, item.width, item.height);\r\n        //     rectangle.index = item.properties.find((prop: Phaser.Types.Tilemaps.TiledObject) => prop.name === \"value\").value;\r\n        //     this.chekpoints.push(rectangle);\r\n        // });\r\n    }\r\n\r\n    public getPlayer(): Phaser.Types.Tilemaps.TiledObject {\r\n        // find a player object in tilemap\r\n        return this.tilemap.findObject(\"player\", playerObject => playerObject.name === \"player\");\r\n    }\r\n\r\n    public getTurretPosition(): StartPosition {\r\n        const turret: Phaser.Types.Tilemaps.TiledObject = this.tilemap.findObject(\"enemy\", playerObject => playerObject.name === \"enemy\");\r\n        const position: StartPosition = {x: turret.x, y: turret.y};\r\n        return position;\r\n    }\r\n\r\n    getTileFriction(car: Phaser.Physics.Matter.Sprite): number {\r\n        for (const roadType in ROADS_FRICTION) {\r\n            // match different road`s types where the car is running now\r\n            // if it`s in ROADS_FRICTION, return appropriate road`s type\r\n            // important!!! road`s types have to match exactly with layers` names in the map\r\n            const tile: Phaser.Tilemaps.Tile = this.tilemap.getTileAtWorldXY(car.x, car.y, false, this._scene.cameras.main, roadType);\r\n            if (tile) return ROADS_FRICTION[roadType];\r\n        }    \r\n        // if it`s not -> return GRASS_FRICTION\r\n        return GROUND_FRICTION;\r\n    }\r\n\r\n    // getCheckpoint(car: Phaser.Physics.Matter.Sprite): number | boolean {\r\n    //     const checkpoint = this.chekpoints.find(item => item.contains(car.x, car.y));\r\n    //     // check if the car is in the exact checkpoint or car isn`t in the checkpoint area\r\n    //     return checkpoint ? Number.parseInt(checkpoint.index) : false;\r\n    // }\r\n}","import Vehicle from \"./Vehicle\";\r\nimport Map from \"./Map\";\r\nimport { DIRECTIONS, StartPosition, TURNS } from \"../utils/utils\";\r\n\r\nexport default class Player extends Vehicle {\r\n    protected _scene: Phaser.Scene = null;\r\n    protected _map: Map = null;\r\n    private _cursor: Phaser.Types.Input.Keyboard.CursorKeys = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, texture: string, map: Map, shellTexture: string, enemy: boolean) {\r\n        super(scene, position, texture, map, shellTexture, enemy);\r\n        this._scene = scene;\r\n        this._map = map;\r\n        this._cursor = this._scene.input.keyboard.createCursorKeys(); // take control from keyboard, exactly up and down keys\r\n    }\r\n\r\n    protected get direction(): number {\r\n        let direction = DIRECTIONS.NONE;\r\n\r\n        if (this._cursor.up.isDown) direction = DIRECTIONS.FORWARD;\r\n        else if (this._cursor.down.isDown) direction = DIRECTIONS.BACKWARD;\r\n\r\n        return direction;\r\n    }\r\n\r\n    protected get turn(): number {\r\n        let turn = TURNS.NONE;\r\n\r\n        if (this._cursor.right.isDown) turn = TURNS.RIGHT;\r\n        else if (this._cursor.left.isDown) turn = TURNS.LEFT;\r\n\r\n        return turn;\r\n    }\r\n\r\n    public move(): void {\r\n        super.move();\r\n        if (this._cursor.space.isDown) this.fire();\r\n    }\r\n}","import Map from \"./Map\";\r\n\r\nexport default class Shell extends Phaser.GameObjects.GameObject {\r\n    private _scene: Phaser.Scene = null;\r\n    private _parentSprite: Phaser.Physics.Matter.Sprite = null;\r\n    private _map: Map = null;\r\n    private _texture: string = \"\";\r\n    public _sprite: Phaser.Physics.Matter.Sprite = null;\r\n\r\n    constructor(scene: Phaser.Scene, parentSprite: Phaser.Physics.Matter.Sprite, map: Map, texture: string) {\r\n        super(scene, texture);\r\n        this._scene = scene;\r\n        this._parentSprite = parentSprite;\r\n        this._map = map;\r\n        this._texture = texture;\r\n        this._scene.events.on(\"update\", this.update, this);\r\n    }\r\n\r\n    // check if shell is out of boarders\r\n    public update(): void {\r\n        if (this._sprite.active && (this._sprite.x < -20 ||\r\n            this._sprite.x > this._map.tilemap.widthInPixels + 20 ||\r\n            this._sprite.y < -20 ||\r\n            this._sprite.y > this._map.tilemap.heightInPixels + 20)) this.setAlive(false);\r\n    }\r\n\r\n    public setAlive(status: boolean): void {\r\n        this._sprite.body.enable = status;\r\n        this._sprite.setVisible(status);\r\n        this._sprite.setActive(status);\r\n        this.setActive(status);\r\n        // if (!status) this.emit(\"object_killed\");\r\n    }\r\n\r\n    // direction has to be among 1 and -1. 1 for enemies, -1 for player\r\n    public flyOut(direction: number) {\r\n        const vector: Phaser.Math.Vector2 = new Phaser.Math.Vector2();\r\n        vector.setToPolar(this._parentSprite.rotation + (direction * Math.PI / 2), 30); // (this._tank.vehicle.rotation - Math.PI) - correct side from where shell throws, 30 - distance from tank`s core and shell\r\n        this._sprite = this._scene.matter.add.sprite(this._parentSprite.x + vector.x, this._parentSprite.y + vector.y, \"objects\", this._texture);\r\n        this._sprite.angle = this._parentSprite.angle; // tank and shell sprites should be on the same direction\r\n        this._sprite.setVelocity(vector.x * 0.9, vector.y * 0.9); // shell`s speed\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setAlive(true);\r\n    }\r\n}","import { StartPosition } from \"../utils/utils\";\r\nimport GroupOfShells from \"./GroupOfShells\";\r\nimport Map from \"./Map\";\r\nimport Player from \"./Player\";\r\n\r\nexport default class Turret extends Phaser.GameObjects.GameObject {\r\n    private _scene: Phaser.Scene = null;\r\n    private _groupOfShells: GroupOfShells;\r\n    public _platform: Phaser.Physics.Matter.Sprite = null;\r\n    public _turret: Phaser.Physics.Matter.Sprite = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, map: Map, shellTexture: string, enemy: boolean) {\r\n        super(scene, \"platform\");\r\n        this._scene = scene;\r\n        this.init(position, map, shellTexture, enemy);\r\n    }\r\n\r\n    private init(position: StartPosition, map: Map, shellTexture: string, enemy: boolean): void {\r\n        this._platform = this._scene.matter.add.sprite(position.x, position.y, \"objects\", \"platform\");\r\n        this._platform.setStatic(true);\r\n        this._turret = this._scene.matter.add.sprite(position.x, position.y, \"objects\", \"turret\");\r\n        this._turret.setStatic(true);\r\n        this._groupOfShells = new GroupOfShells(this._scene, this._turret, map, shellTexture, enemy);\r\n    }\r\n\r\n    public watch(player: Player): void {\r\n        const angle = Phaser.Math.Angle.Between(this._turret.x, this._turret.y, player.sprite.x, player.sprite.y);\r\n        this._turret.rotation = angle - Math.PI / 2; // Math.PI / 2 - trick to turn turret oposite to the tank\r\n\r\n        this.fire();\r\n    }\r\n\r\n    private fire(): void {\r\n        if (this._groupOfShells) {\r\n            this._groupOfShells.createFire();\r\n        }\r\n    }\r\n}","import { SPEED, DIRECTIONS, TURNS, StartPosition } from \"../utils/utils\";\r\nimport GroupOfShells from \"./GroupOfShells\";\r\nimport Map from \"./Map\";\r\n\r\nexport default class Vehicle {\r\n    protected _scene: Phaser.Scene = null;\r\n    protected _map: Map = null;\r\n    private _velocity: number;\r\n    private _groupOfShells: GroupOfShells;\r\n    public sprite: Phaser.Physics.Matter.Sprite = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, texture: string, map: Map, shellTexture: string, enemy: boolean) {\r\n        this._scene = scene;\r\n        this._map = map;\r\n        this._velocity = 0; // current car`s direction\r\n        this.sprite = this._scene.matter.add.sprite(position.x, position.y, \"objects\", texture); // add sprite to the scene\r\n        this.sprite.setFixedRotation(); // avoid the vehicle`s spinning on its axis\r\n\r\n        // test checking\r\n        this._groupOfShells = new GroupOfShells(this._scene, this.sprite, this._map, shellTexture, enemy);\r\n    }\r\n\r\n    protected get direction(): number {\r\n        let direction = DIRECTIONS.NONE;\r\n\r\n        // need implement separetly for AI, for human\r\n\r\n        return direction;\r\n    }\r\n\r\n    // set the car`s speed\r\n    protected get velocity(): number {\r\n        const carSpeed = Math.abs(this._velocity); // make the speed absolute, without negative meaning\r\n\r\n        const maxSpeed = this.getMaxSpeed();\r\n\r\n        // if the player clicks on the key Up or Down and\r\n        // current car`s speed is less than max speed (10)\r\n        // increase the car`s speed by multipling acceleration with direction, which can be negative or positive\r\n        if (this.direction && carSpeed < maxSpeed) {\r\n            this._velocity += this.direction;\r\n        } else if ((this.direction && carSpeed > maxSpeed) || (!this.direction && carSpeed > 0)) { // if the player doesn`t click on the key Up or Down and\r\n            this._velocity -= this._velocity; // current car`s speed is more than max speed (10) ->\r\n            // decrease the car`s speed by multipling acceleration with previous direction, which can be negative or positive\r\n        }\r\n        return this._velocity;\r\n    }\r\n\r\n    protected getMaxSpeed() {\r\n        return SPEED.BASIC * this._map.getTileFriction(this.sprite);\r\n    }\r\n\r\n    protected get turn(): number {\r\n        let turn = TURNS.NONE;\r\n\r\n        // need implement separetly for AI, for human\r\n\r\n        return turn;\r\n    }\r\n\r\n    // set the car`s angle, when the car is turning to the right or to the left\r\n    protected get angle(): number {\r\n        return this.sprite.angle + this.turn * SPEED.BASIC / 2;\r\n    }\r\n\r\n    private getVelocityFromAngle(): Phaser.Math.Vector2{ // get sprite`s speed with account of sprite`s angle\r\n        const vector2 = new Phaser.Math.Vector2();\r\n        // vector2 дает нам правильное смещение картинки/спрайта по оси х/у\r\n        // первый параметр - текущий угол картинки (по умолчанию 90 град. то есть вправо). Машинка смотрит вверх, поэтому нужно подправить угол\r\n        // второй параметр - ускорение картинки (положительное/отрицатильное). То есть или вперед, или назад\r\n        return vector2.setToPolar(this.sprite.rotation - Math.PI/2, this.velocity);\r\n    }\r\n\r\n    public move(): void {\r\n        this.checkOutOfBounds();\r\n\r\n        // the car is moving with account of turn`s angle\r\n        this.sprite.setAngle(this.angle);\r\n        const velocity = this.getVelocityFromAngle();\r\n        this.sprite.setVelocity(velocity.x, velocity.y);\r\n        // this.checkPosition();\r\n    }\r\n\r\n    private checkOutOfBounds(): void {\r\n        if (this.sprite.body.position.y > this._map.tilemap.heightInPixels) {\r\n            this.sprite.body.position.y = this._map.tilemap.heightInPixels - 20;\r\n        };\r\n        if (this.sprite.body.position.y < 0) {\r\n            this.sprite.body.position.y = 20;\r\n        }\r\n        if (this.sprite.body.position.x < 0) {\r\n            this.sprite.body.position.x = 20;\r\n        }\r\n        if (this.sprite.body.position.x > this._map.tilemap.widthInPixels) {\r\n            this.sprite.body.position.x = this._map.tilemap.widthInPixels - 20;\r\n        }\r\n    }\r\n\r\n    protected fire(): void {\r\n        if (this._groupOfShells) {\r\n            this._groupOfShells.createFire();\r\n        }\r\n    }\r\n\r\n    // private checkPosition(): void {\r\n    //     // returns \"1\", \"2\", \"3\", \"4\" or false\r\n    //     const checkpoint: number | boolean = this._map.getCheckpoint(this.car);\r\n    //     if (checkpoint) {\r\n    //         this.onCheckpoint(checkpoint as number);\r\n    //     }\r\n    // }\r\n\r\n    // private onCheckpoint(checkpoint: number) {\r\n    //     // when one lap is finished\r\n    //     if (checkpoint === 1 && this._checkpoint === this._map.chekpoints.length) {\r\n    //         this._checkpoint = 1;\r\n    //         this.car.emit(\"lap\"); // we trigger some event on the key \"lap\"\r\n    //     } else if (checkpoint === this._checkpoint + 1) { // when the player is crossing one checkpoint\r\n    //         ++this._checkpoint;\r\n    //     }\r\n    // }\r\n}","import BootScene from \"./scenes/BootScene\";\r\nimport PreloadScene from \"./scenes/PreloadScene\";\r\nimport GameScene from \"./scenes/GameScene\";\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 1280, // set according to background image size / map`s size!!!\r\n    height: 750, // set according to background image size / map`s size!!!\r\n    scene: [\r\n        new BootScene(),\r\n        new PreloadScene(),\r\n        // new StartScene(),\r\n        new GameScene()\r\n    ],\r\n    scale: {\r\n        mode: Phaser.Scale.FIT, // auto scaling of all sprites\r\n        autoCenter: Phaser.Scale.CENTER_BOTH // canvas centering in the center of the screen\r\n    },\r\n    physics: {\r\n        // default: \"arcade\",\r\n        // arcade: { debug: false} // if true -> shows objects` frames\r\n        default: \"matter\",\r\n        matter: {\r\n            debug: false,\r\n            gravity: { x: 0, y: 0 }\r\n        }\r\n    }\r\n};\r\n\r\nconst game = new Phaser.Game(config);","export default class BootScene extends Phaser.Scene {\r\n    constructor() {super({key: \"boot-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.load.image(\"background\", \"assets/images/background.png\");\r\n    }\r\n\r\n    protected create(): void {\r\n        this.scene.start(\"preload-scene\");\r\n    }\r\n}","import BangAnimation from \"../classes/BangAnimation\";\r\nimport Map from \"../classes/Map\";\r\nimport Player from \"../classes/Player\";\r\nimport Turret from \"../classes/Turret\";\r\nimport { BANG_ANIMATION, StartPosition, TANKS } from \"../utils/utils\";\r\n\r\nexport default class GameScene extends Phaser.Scene {\r\n    private _map: Map = null;\r\n    private _player1: Player = null;\r\n    // testing turret\r\n    private _turret: Turret = null;\r\n\r\n    constructor() {super({key: \"game-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.add.sprite(0, 0, \"background\").setOrigin(0);\r\n\r\n        // to garantee safe and correct loading of animation\r\n        const frames: Phaser.Types.Animations.AnimationFrame[] = this.anims.generateFrameNames(\"objects\", {\r\n            prefix: \"explosion\",\r\n            start: 1,\r\n            end: 5\r\n        });\r\n        this.anims.create({\r\n            key: BANG_ANIMATION,\r\n            frames: frames,\r\n            frameRate: 5,\r\n            duration: 800, // miliseconds\r\n            repeat: 0, // to play animation only once\r\n        });\r\n    }\r\n\r\n    protected create(): void {\r\n        this._map = new Map(this);\r\n\r\n        const vehicle: any = this.getVehicleConfig();\r\n        const player = this._map.getPlayer();\r\n        const position: StartPosition = {x: player.x, y: player.y};\r\n        this._player1 = new Player(this, position, vehicle.player1.sprite, this._map, \"bulletRed1_outline\", false);\r\n        this.matter.world.on(\"collisionstart\", (event, box, shell) => {\r\n            if (box.gameObject.frame.name === \"crateWood\" && shell.gameObject.frame.name === \"bulletRed1_outline\") {\r\n                const position: StartPosition = box.position;\r\n                box.gameObject.destroy();\r\n                shell.gameObject.destroy();\r\n                BangAnimation.generateBang(this, position);\r\n            }\r\n        }, this);\r\n        this.cameras.main.setBounds(0, 0, this._map.tilemap.widthInPixels, this._map.tilemap.heightInPixels); // set map`s bounds as camera`s bounds\r\n        this.cameras.main.startFollow(this._player1.sprite); // set camera to center on the player`s car\r\n\r\n        // testing turret\r\n        this._turret = new Turret(this, this._map.getTurretPosition(), this._map, \"bulletDark1_outline\", true);\r\n    }\r\n\r\n    // see docs -> Scene.Methods\r\n    update(time: number, delta: number): void {\r\n        this._player1.move();\r\n        this._turret.watch(this._player1);\r\n    }\r\n\r\n    private getVehicleConfig(): any {\r\n        // config for the first player\r\n        let config: any = { player1: TANKS.RED, player2: TANKS.BLUE };\r\n        // if (this._client && !this._client._isFirst) {\r\n        //     // config for the second player\r\n        //     config = { player1: CARS.BLUE, player2: CARS.RED };\r\n        // }\r\n        return config;\r\n    }\r\n}","import { LoadingBar } from \"../utils/LoadingBar\";\r\n\r\nexport default class PreloadScene extends Phaser.Scene {\r\n    constructor() {super({key: \"preload-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.add.sprite(0, 0, \"background\").setOrigin(0);\r\n        new LoadingBar(this);\r\n\r\n        // load images as a tileset\r\n        this.load.spritesheet(\"tileset\", \"assets/images/tilemap.png\", { frameWidth: 64, frameHeight: 64 });\r\n        this.load.tilemapTiledJSON(\"tilemap\", \"assets/images/tilemap.json\");\r\n        this.load.atlas(\"objects\", \"assets/images/objects.png\", \"assets/images/objects.json\");\r\n    }\r\n\r\n    protected create(): void {\r\n        this.scene.start(\"game-scene\");\r\n    }\r\n}","export class LoadingBar {\r\n    private scene: Phaser.Scene;\r\n    private style: any;\r\n    private progressBox: Phaser.GameObjects.Graphics;\r\n    private progressBar: Phaser.GameObjects.Graphics;\r\n\r\n    constructor(scene: Phaser.Scene) {\r\n        this.scene = scene;\r\n        this.style = {\r\n            boxColor: 0xD3D3D3,\r\n            barColor: 0xFFF8DC,\r\n            x: (this.scene.game.config.width) as number / 2 - 450,\r\n            y: (this.scene.game.config.height) as number / 2 + 250,\r\n            width: 900,\r\n            height: 25\r\n        };\r\n        this.progressBox = new Phaser.GameObjects.Graphics(this.scene);\r\n        this.progressBox = this.scene.add.graphics();\r\n        this.progressBar = this.scene.add.graphics();\r\n\r\n        this.showProgressBox();\r\n        this.setEvents();\r\n    }\r\n\r\n    setEvents() {\r\n        this.scene.load.on(\"progress\", this.showProgressBar, this);\r\n        this.scene.load.on(\"complete\", this.onLoadComplete, this);\r\n    }\r\n\r\n    showProgressBox() {\r\n        this.progressBox\r\n            .fillStyle(this.style.boxColor) // grey color\r\n            .fillRect(this.style.x, this.style.y, this.style.width, this.style.height);\r\n    }\r\n\r\n    showProgressBar(value: number) {\r\n        this.progressBar\r\n            .clear()\r\n            .fillStyle(this.style.barColor) // yellow color\r\n            .fillRect(this.style.x, this.style.y, this.style.width * value, this.style.height);\r\n    }\r\n\r\n    onLoadComplete() {\r\n        this.progressBox.destroy();\r\n        this.progressBar.destroy();\r\n    }\r\n}","export enum DIRECTIONS {\r\n    NONE = 0,\r\n    FORWARD = 1,\r\n    BACKWARD = -1\r\n};\r\n\r\nexport enum TURNS {\r\n    NONE = 0,\r\n    RIGHT = 1,\r\n    LEFT = -1\r\n};\r\n\r\nexport enum SPEED {\r\n    BASIC = 3,\r\n    FASTER = 5,\r\n    FASTEST = 7\r\n};\r\n\r\nexport const GROUND_FRICTION = 0.5;\r\nexport const ROADS_FRICTION = {\r\n    road: 1\r\n};\r\n\r\nexport const TANKS = {\r\n    RED: {\r\n        sprite: \"tank_red\",\r\n        position: \"player\"\r\n    },\r\n    BLUE: {\r\n        sprite: \"tank_green\",\r\n        position: \"player\"\r\n    }\r\n};\r\n\r\nexport type StartPosition = {\r\n    x: number,\r\n    y: number\r\n};\r\n\r\nexport const BANG_ANIMATION: string = \"BANG_ANIMATION\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/game.ts\");\n",""],"names":[],"sourceRoot":""}