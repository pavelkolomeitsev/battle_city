{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://battle_city/./src/classes/BangAnimation.ts","webpack://battle_city/./src/classes/GroupOfShells.ts","webpack://battle_city/./src/classes/Map.ts","webpack://battle_city/./src/classes/Player.ts","webpack://battle_city/./src/classes/Shell.ts","webpack://battle_city/./src/classes/Turret.ts","webpack://battle_city/./src/classes/Vehicle.ts","webpack://battle_city/./src/game.ts","webpack://battle_city/./src/scenes/BootScene.ts","webpack://battle_city/./src/scenes/GameScene.ts","webpack://battle_city/./src/scenes/PreloadScene.ts","webpack://battle_city/./src/utils/LoadingBar.ts","webpack://battle_city/./src/utils/utils.ts","webpack://battle_city/webpack/bootstrap","webpack://battle_city/webpack/before-startup","webpack://battle_city/webpack/startup","webpack://battle_city/webpack/after-startup"],"sourcesContent":["import { BANG_ANIMATION, StartPosition } from \"../utils/utils\";\r\n\r\nexport default class BangAnimation extends Phaser.GameObjects.Sprite {\r\n    private _scene: Phaser.Scene = null;\r\n    \r\n    constructor(scene: Phaser.Scene, position: StartPosition, textureType: string) {\r\n        super(scene, position.x, position.y, textureType);\r\n        this._scene = scene;\r\n        this._scene.add.existing(this);\r\n        this.bangAnimation();\r\n    }\r\n\r\n    private bangAnimation(): void {\r\n        this.play(BANG_ANIMATION);\r\n        this.once(Phaser.Animations.Events.ANIMATION_COMPLETE, () => this.destroy(), this);\r\n    }\r\n\r\n    public static generateBang(scene: Phaser.Scene, position: StartPosition): void {\r\n        new BangAnimation(scene, position, \"explosion1\");\r\n    }\r\n}","import { StartPosition } from \"../utils/utils\";\r\nimport Map from \"./Map\";\r\nimport Shell from \"./Shell\";\r\n\r\nexport default class GroupOfShells extends Phaser.Physics.Arcade.Group {\r\n    private _scene: Phaser.Scene = null;\r\n    private _parentSprite: Phaser.GameObjects.Sprite = null;\r\n    private _map: Map = null;\r\n    private _texture: string = \"\";\r\n    private _enemy: boolean = false;\r\n    private _direction: number = 1;\r\n    private _nextShoot: number = 0;\r\n\r\n    constructor(world: Phaser.Physics.Arcade.World, scene: Phaser.Scene, parentSprite: Phaser.GameObjects.Sprite, map: Map, texture: string, enemy: boolean = true) {\r\n        super(world, scene);\r\n        this._scene = scene;\r\n        this._parentSprite = parentSprite;\r\n        this._map = map;\r\n        this._texture = texture;\r\n        this._enemy = enemy;\r\n        this._direction = enemy ? 1 : -1;\r\n    }\r\n\r\n    // mechanism for sprites` reusing for better performance\r\n    public createFire(): void {\r\n        if (this._nextShoot > this._scene.time.now) return; // to prevent toans of fires\r\n\r\n        let shell: Shell = this.getFirstDead();\r\n        const side: number = this._enemy ? -35 : 30;\r\n        \r\n        if (!shell) {\r\n            const vector: Phaser.Math.Vector2 = this._scene.physics.velocityFromAngle(this._parentSprite.angle + 270, side); // +270 - trick to set shell just before barrel\r\n            const position: StartPosition = { x: this._parentSprite.x + vector.x, y: this._parentSprite.y + vector.y };\r\n            shell = new Shell(this._scene, position, \"objects\", this._texture, this._parentSprite, this._map);\r\n            this.add(shell);\r\n        } else {\r\n            const vector: Phaser.Math.Vector2 = this._scene.physics.velocityFromAngle(this._parentSprite.angle + 270, side); // +270 - trick to set shell just before barrel\r\n            const position: StartPosition = { x: this._parentSprite.x + vector.x - 6, y: this._parentSprite.y + vector.y - 6 };\r\n            shell.body.x = position.x;\r\n            shell.body.y = position.y;\r\n            shell.setAlive(true);\r\n        }\r\n        shell.flyOut(this._direction);\r\n\r\n        this._nextShoot = this._scene.time.now + 500; // instead one fire per 0.5 second\r\n    }\r\n}","import { GROUND_FRICTION, ROADS_FRICTION, StartPosition } from \"../utils/utils\";\r\n\r\nexport default class Map {\r\n    private _scene: Phaser.Scene = null;\r\n    private _tileset: Phaser.Tilemaps.Tileset = null;\r\n    public tilemap: Phaser.Tilemaps.Tilemap = null;\r\n    public boxes: Phaser.GameObjects.Sprite[] = [];\r\n    public defenceArea: Phaser.Geom.Rectangle = null;\r\n\r\n    constructor(scene: Phaser.Scene) {\r\n        this._scene = scene;\r\n        this.init();\r\n        this.create();\r\n    }\r\n\r\n    init(): void {\r\n        // create a tilemap object\r\n        this.tilemap = this._scene.make.tilemap({ key: \"tilemap\" });\r\n        // add images to tilemap\r\n        // 1 param look in \"tilemap.json\" prop tilesets - name\r\n        this._tileset = this.tilemap.addTilesetImage(\"tilemap\", \"tileset\", 64, 64, 0, 0);\r\n    }\r\n\r\n    create(): void {\r\n        this.createLayers();\r\n        this.createCollisions();\r\n        this.createDefenceArea();\r\n    }\r\n    \r\n    private createLayers(): void {\r\n        // create 2 layers\r\n        this.tilemap.createLayer(\"ground\", this._tileset);\r\n        this.tilemap.createLayer(\"road\", this._tileset);\r\n    }\r\n\r\n    private createCollisions(): void {\r\n        // first param - name of object`s layer in tilemap\r\n        // second param - callback function, which called for every image in tileset\r\n        this.tilemap.findObject(\"collisions\", collisionObject => {\r\n            // we have to cast implicitly\r\n            // collisionObject - GameObject, but we need Sprite!\r\n            const castedObject: Phaser.GameObjects.Sprite = collisionObject as Phaser.GameObjects.Sprite;\r\n            let sprite: Phaser.GameObjects.Sprite = new Phaser.GameObjects.Sprite(this._scene, castedObject.x, castedObject.y, \"objects\", \"crateWood\");\r\n            // let sprite: Phaser.GameObjects.Sprite = new Phaser.GameObjects.Sprite(this._scene, castedObject.x, castedObject.y, \"objects\", \"crateWood\");\r\n            this._scene.add.existing(sprite);\r\n            this._scene.physics.add.existing(sprite, true); // true -> to make it static\r\n            sprite.body.enable = true;\r\n            this.boxes.push(sprite);\r\n        });\r\n    }\r\n\r\n    private createDefenceArea(): void {\r\n        // get all game objects with name \"checkpoint\"\r\n        const array: Phaser.Types.Tilemaps.TiledObject[] = this.tilemap.filterObjects(\"defence_area\", checkpoint => checkpoint.name === \"defence_area\");\r\n        // create rectangle phaser object\r\n        array.forEach((item: Phaser.Types.Tilemaps.TiledObject) => {\r\n            this.defenceArea = new Phaser.Geom.Rectangle(item.x, item.y, item.width, item.height);\r\n        });\r\n    }\r\n\r\n    public getPlayer(): Phaser.Types.Tilemaps.TiledObject {\r\n        // find a player object in tilemap\r\n        return this.tilemap.findObject(\"player\", playerObject => playerObject.name === \"player\");\r\n    }\r\n\r\n    public getTurretPosition(): StartPosition {\r\n        const turret: Phaser.Types.Tilemaps.TiledObject = this.tilemap.findObject(\"enemy\", playerObject => playerObject.name === \"enemy\");\r\n        const position: StartPosition = {x: turret.x, y: turret.y};\r\n        return position;\r\n    }\r\n\r\n    getTileFriction(vehicle: Phaser.GameObjects.Sprite): number {\r\n        for (const roadType in ROADS_FRICTION) {\r\n            // match different road`s types where the car is running now\r\n            // if it`s in ROADS_FRICTION, return appropriate road`s type\r\n            // important!!! road`s types have to match exactly with layers` names in the map\r\n            const tile: Phaser.Tilemaps.Tile = this.tilemap.getTileAtWorldXY(vehicle.x, vehicle.y, false, this._scene.cameras.main, roadType);\r\n            if (tile) return ROADS_FRICTION[roadType];\r\n        }    \r\n        // if it`s not -> return GRASS_FRICTION\r\n        return GROUND_FRICTION;\r\n    }\r\n\r\n    public isInDefenceArea(playersTank: Phaser.GameObjects.Sprite): boolean {\r\n        // check if player is in the defence area or not\r\n        if (playersTank.active) {\r\n            return this.defenceArea.contains(playersTank.x, playersTank.y);\r\n        } else return false;\r\n    }\r\n}","import Vehicle from \"./Vehicle\";\r\nimport Map from \"./Map\";\r\nimport { DIRECTIONS, StartPosition, TURNS } from \"../utils/utils\";\r\n\r\nexport default class Player extends Vehicle {\r\n    private _cursor: Phaser.Types.Input.Keyboard.CursorKeys = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, atlasName: string, textureName: string, map: Map, shellTexture: string, enemy: boolean) {\r\n        super(scene, position, atlasName, textureName, map, shellTexture, enemy);\r\n        this._cursor = this._scene.input.keyboard.createCursorKeys(); // take control from keyboard, exactly up and down keys\r\n        // this._scene.events.on(\"update\", this.update, this);\r\n    }\r\n\r\n    protected get direction(): number {\r\n        let direction = DIRECTIONS.NONE;\r\n\r\n        if (this._cursor.up.isDown) direction = DIRECTIONS.FORWARD;\r\n        else if (this._cursor.down.isDown) direction = DIRECTIONS.BACKWARD;\r\n        \r\n        return direction;\r\n    }\r\n\r\n    protected get turn(): number {\r\n        let turn = TURNS.NONE;\r\n\r\n        if (this._cursor.right.isDown) turn = TURNS.RIGHT;\r\n        else if (this._cursor.left.isDown) turn = TURNS.LEFT;\r\n        \r\n        return turn;\r\n    }\r\n\r\n    public move(): void {\r\n        // if (!this.active) return;\r\n        super.move();\r\n        if (this._cursor.space.isDown && this) this.fire();\r\n    }\r\n\r\n    public setAlive(status: boolean): void {\r\n        this.body.enable = status;\r\n        this.setVisible(status);\r\n        this.setActive(status);\r\n        // this.emit(\"player_killed\");\r\n    }\r\n}","import { StartPosition, SPEED } from \"../utils/utils\";\r\nimport Map from \"./Map\";\r\n\r\nexport default class Shell extends Phaser.GameObjects.Sprite {\r\n    private _scene: Phaser.Scene = null;\r\n    private _parentSprite: Phaser.GameObjects.Sprite = null;\r\n    private _map: Map = null;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, atlasName: string, textureName: string, parentSprite: Phaser.GameObjects.Sprite, map: Map) {\r\n        super(scene, position.x, position.y, atlasName, textureName);\r\n        this._scene = scene;\r\n        this._parentSprite = parentSprite;\r\n        this._map = map;\r\n        this.init();\r\n        this._scene.events.on(\"update\", this.update, this);\r\n    }\r\n\r\n    protected init() {\r\n        this._scene.add.existing(this); // add sprite to the scene\r\n        this._scene.physics.add.existing(this); // add sprite as physic object to Phaser engine\r\n        this.body.enable = true; // the physic body of \"dragon\" will be available for physic impacts\r\n    }\r\n\r\n    // check if shell is out of boarders\r\n    public update(): void {\r\n        if (this.active && (this.body.x < -20 ||\r\n            this.body.x > this._map.tilemap.widthInPixels + 20 ||\r\n            this.body.y < -20 ||\r\n            this.body.y > this._map.tilemap.heightInPixels + 20)) this.setAlive(false);\r\n    }\r\n\r\n    public setAlive(status: boolean): void {\r\n        this.body.enable = status;\r\n        this.setVisible(status);\r\n        this.setActive(status);\r\n        // if (!status) this.emit(\"object_killed\");\r\n    }\r\n\r\n    // direction has to be among 1 and -1. 1 for enemies, -1 for player\r\n    public flyOut(direction: number) {\r\n        const vector: Phaser.Math.Vector2 = new Phaser.Math.Vector2();\r\n        vector.setToPolar(this._parentSprite.rotation + (direction * Math.PI / 2)); // (this._tank.vehicle.rotation - Math.PI) - correct side from where shell throws, 30 - distance from tank`s core and shell\r\n        this.angle = this._parentSprite.angle; // tank and shell sprites should be on the same direction\r\n        this.body.setVelocity(vector.x * SPEED.FASTEST * 3, vector.y * SPEED.FASTEST * 3); // shell`s speed\r\n    }\r\n}","import { StartPosition } from \"../utils/utils\";\r\nimport GroupOfShells from \"./GroupOfShells\";\r\nimport Map from \"./Map\";\r\nimport Player from \"./Player\";\r\n\r\nexport default class Turret {\r\n    private _scene: Phaser.Scene = null;\r\n    public groupOfShells: GroupOfShells;\r\n    public platform: Phaser.GameObjects.Sprite = null;\r\n    public turret: Phaser.GameObjects.Sprite = null;\r\n    public isFiring: boolean = true;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, map: Map, shellTexture: string, enemy: boolean) {\r\n        this._scene = scene;\r\n        this.init(position, map, shellTexture, enemy);\r\n    }\r\n\r\n    private init(position: StartPosition, map: Map, shellTexture: string, enemy: boolean): void {\r\n        this.platform = new Phaser.GameObjects.Sprite(this._scene, position.x, position.y, \"objects\", \"platform\");\r\n        this._scene.add.existing(this.platform);\r\n        this._scene.physics.add.existing(this.platform);\r\n        this.platform.body.enable = true;\r\n        this.turret = new Phaser.GameObjects.Sprite(this._scene, position.x, position.y, \"objects\", \"turret\");\r\n        this._scene.add.existing(this.turret);\r\n        this._scene.physics.add.existing(this.turret);\r\n        this.turret.body.enable = true;\r\n        this.groupOfShells = new GroupOfShells(this._scene.physics.world, this._scene, this.turret, map, shellTexture, enemy);\r\n    }\r\n\r\n    public runTurret(player: Player, isPlayerNear: boolean): void {\r\n        isPlayerNear ? this.watchAndFire(player) : this.watch(player);\r\n    }\r\n\r\n    private watch(player: Player): void {\r\n        this.getCorrectAngle(player);\r\n    }\r\n\r\n    private watchAndFire(player: Player): void {\r\n        this.getCorrectAngle(player);\r\n        this.fire();\r\n    }\r\n\r\n    private getCorrectAngle(player: Player): void {\r\n        if (this.turret && player) {\r\n            const angle = Phaser.Math.Angle.Between(this.turret.x, this.turret.y, player.x, player.y);\r\n            this.turret.rotation = angle - Math.PI / 2; // Math.PI / 2 - trick to turn turret oposite to the tank\r\n        }\r\n    }\r\n\r\n    private fire(): void {\r\n        if (this.groupOfShells && this.isFiring) this.groupOfShells.createFire();\r\n    }\r\n\r\n    public destroyTurret(): void {\r\n        this.turret.body.enable = false;\r\n        this.turret.setVisible(false);\r\n        this.turret.setActive(false);\r\n\r\n        // this.turret.destroy();\r\n        // this.turret = null;\r\n        // this.platform.destroy();\r\n        // this.platform = null;\r\n        this.platform.body.enable = false;\r\n        this.platform.setVisible(false);\r\n        this.platform.setActive(false);\r\n\r\n        this._scene = null;\r\n        this.groupOfShells = null;\r\n    }\r\n}","import { SPEED, DIRECTIONS, TURNS, StartPosition } from \"../utils/utils\";\r\nimport GroupOfShells from \"./GroupOfShells\";\r\nimport Map from \"./Map\";\r\n\r\nexport default class Vehicle extends Phaser.GameObjects.Sprite {\r\n    protected _scene: Phaser.Scene = null;\r\n    protected _map: Map = null;\r\n    private _velocity: number;\r\n    public groupOfShells: GroupOfShells;\r\n\r\n    constructor(scene: Phaser.Scene, position: StartPosition, atlasName: string, textureName: string, map: Map, shellTexture: string, enemy: boolean) {\r\n        super(scene, position.x, position.y, atlasName, textureName);\r\n        this._scene = scene;\r\n        this._map = map;\r\n        this._velocity = 0;\r\n        this.groupOfShells = new GroupOfShells(this._scene.physics.world, this._scene, this, this._map, shellTexture, enemy);\r\n        this.init();\r\n    }\r\n    \r\n    protected init() {\r\n        this._scene.add.existing(this); // add sprite to the scene\r\n        this._scene.physics.add.existing(this); // add sprite as physic object to Phaser engine\r\n        this.body.enable = true; // the physic body of \"dragon\" will be available for physic impacts\r\n    }\r\n\r\n    protected get direction(): number {\r\n        let direction = DIRECTIONS.NONE;\r\n\r\n        // need implement separetly for AI, for human\r\n\r\n        return direction;\r\n    }\r\n\r\n    // set the vehicle`s speed\r\n    protected get velocity(): number {\r\n        const vehicleSpeed = Math.abs(this._velocity); // make the speed absolute, without negative meaning\r\n        const maxSpeed = this.getMaxSpeed();\r\n        // if the player clicks on the key Up or Down and\r\n        // current vehicle`s speed is less than max speed (10)\r\n        // increase the vehicle`s speed by multipling acceleration with direction, which can be negative or positive\r\n\r\n        if (this.direction && vehicleSpeed < maxSpeed) {\r\n            this._velocity += this.direction;\r\n        }\r\n        else if ((this.direction && vehicleSpeed > maxSpeed) || (!this.direction && vehicleSpeed > 0)) { // if the player doesn`t click on the key Up or Down and\r\n            this._velocity -= this._velocity; // current vehicle`s speed is more than max speed (10) ->\r\n            // decrease the vehicle`s speed by multipling acceleration with previous direction, which can be negative or positive\r\n        }\r\n        return this._velocity;\r\n    }\r\n\r\n    protected getMaxSpeed() {\r\n        return SPEED.BASIC * this._map.getTileFriction(this);\r\n    }\r\n\r\n    protected get turn(): number {\r\n        let turn = TURNS.NONE;\r\n\r\n        // need implement separetly for AI, for human\r\n\r\n        return turn;\r\n    }\r\n\r\n    // set the vehicle`s angle, when the vehicle is turning to the right or to the left\r\n    public getAngle(): number {\r\n        return this.angle + this.turn;\r\n    }\r\n\r\n    private getVelocityFromAngle(): Phaser.Math.Vector2{ // get sprite`s speed with account of sprite`s angle\r\n        const vector2 = new Phaser.Math.Vector2();\r\n        // vector2 дает нам правильное смещение картинки/спрайта по оси х/у\r\n        // первый параметр - текущий угол картинки (по умолчанию 90 град. то есть вправо). Машинка смотрит вверх, поэтому нужно подправить угол\r\n        // второй параметр - ускорение картинки (положительное/отрицатильное). То есть или вперед, или назад\r\n        return vector2.setToPolar(this.rotation - Math.PI/2, this.velocity);\r\n    }\r\n\r\n    public move(): void {\r\n        this.checkOutOfBounds();\r\n        // the vehicle is moving with account of turn`s angle\r\n        this.setAngle(this.getAngle());\r\n        const velocity = this.getVelocityFromAngle();\r\n        this.body?.setVelocity(velocity.x, velocity.y);\r\n        // this.checkPosition();\r\n    }\r\n\r\n    private checkOutOfBounds(): void {\r\n        if (!this.body) return;\r\n\r\n        if (this.body.y > this._map.tilemap.heightInPixels) {\r\n            this.body.y = this._map.tilemap.heightInPixels - 20;\r\n        };\r\n        if (this.body.y < 0) {\r\n            this.body.y = 20;\r\n        }\r\n        if (this.body.x < 0) {\r\n            this.body.x = 20;\r\n        }\r\n        if (this.body.x > this._map.tilemap.widthInPixels) {\r\n            this.body.x = this._map.tilemap.widthInPixels - 20;\r\n        }\r\n    }\r\n\r\n    protected fire(): void {\r\n        if (this.groupOfShells) {\r\n            this.groupOfShells.createFire();\r\n        }\r\n    }\r\n\r\n    // public destroy(): void {\r\n    //     this.sprite.destroy();\r\n    //     this.sprite = null;\r\n    // }\r\n}","import BootScene from \"./scenes/BootScene\";\r\nimport PreloadScene from \"./scenes/PreloadScene\";\r\nimport GameScene from \"./scenes/GameScene\";\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 1280, // set according to background image size / map`s size!!!\r\n    height: 750, // set according to background image size / map`s size!!!\r\n    scene: [\r\n        new BootScene(),\r\n        new PreloadScene(),\r\n        // new StartScene(),\r\n        new GameScene()\r\n    ],\r\n    scale: {\r\n        mode: Phaser.Scale.FIT, // auto scaling of all sprites\r\n        autoCenter: Phaser.Scale.CENTER_BOTH // canvas centering in the center of the screen\r\n    },\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: { debug: false} // if true -> shows objects` frames\r\n        // default: \"matter\",\r\n        // matter: {\r\n        //     debug: false,\r\n        //     gravity: { x: 0, y: 0 }\r\n        // }\r\n    }\r\n};\r\n\r\nconst game = new Phaser.Game(config);","export default class BootScene extends Phaser.Scene {\r\n    constructor() {super({key: \"boot-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.load.image(\"background\", \"assets/images/background.png\");\r\n    }\r\n\r\n    protected create(): void {\r\n        this.scene.start(\"preload-scene\");\r\n    }\r\n}","import BangAnimation from \"../classes/BangAnimation\";\r\nimport Map from \"../classes/Map\";\r\nimport Player from \"../classes/Player\";\r\nimport Shell from \"../classes/Shell\";\r\nimport Turret from \"../classes/Turret\";\r\nimport { BANG_ANIMATION, StartPosition, TANKS } from \"../utils/utils\";\r\n\r\nexport default class GameScene extends Phaser.Scene {\r\n    private _map: Map = null;\r\n    private _player1: Player = null;\r\n    // testing turret\r\n    private _turret: Turret = null;\r\n\r\n    constructor() {super({key: \"game-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.add.sprite(0, 0, \"background\").setOrigin(0);\r\n\r\n        // to garantee safe and correct loading of animation\r\n        const frames: Phaser.Types.Animations.AnimationFrame[] = this.anims.generateFrameNames(\"objects\", {\r\n            prefix: \"explosion\",\r\n            start: 1,\r\n            end: 5\r\n        });\r\n        this.anims.create({\r\n            key: BANG_ANIMATION,\r\n            frames: frames,\r\n            frameRate: 5,\r\n            duration: 800, // miliseconds\r\n            repeat: 0, // to play animation only once\r\n        });\r\n    }\r\n\r\n    protected create(): void {\r\n        this._map = new Map(this);\r\n\r\n        const vehicle: any = this.getVehicleConfig();\r\n        const player = this._map.getPlayer();\r\n        const position: StartPosition = {x: player.x, y: player.y};\r\n        this._player1 = new Player(this, position, \"objects\", \"tank_red\", this._map, \"bulletRed1_outline\", false);\r\n\r\n        // testing turret\r\n        this._turret = new Turret(this, this._map.getTurretPosition(), this._map, \"bulletDark1_outline\", true);\r\n\r\n        this.handleCollisions();\r\n        \r\n        this.cameras.main.setBounds(0, 0, this._map.tilemap.widthInPixels, this._map.tilemap.heightInPixels); // set map`s bounds as camera`s bounds\r\n        this.cameras.main.startFollow(this._player1); // set camera to center on the player`s car\r\n    }\r\n\r\n    private handleCollisions(): void {\r\n        this.physics.add.overlap(this._turret.platform, this._player1.groupOfShells, this.shellsTurretCollision, null, this);\r\n        this.physics.add.overlap(this._map.boxes, this._player1.groupOfShells, this.boxesShellsCollision, null, this);\r\n        this.physics.add.overlap(this._turret.groupOfShells, this._player1, this.shellsPlayerCollision, null, this);\r\n    }\r\n\r\n    private boxesShellsCollision(box: Phaser.GameObjects.Sprite, shell: Shell): void {\r\n        const position: StartPosition = { x: box.x, y: box.y };\r\n        BangAnimation.generateBang(this, position);\r\n        box.destroy();\r\n        shell.setAlive(false);\r\n    }\r\n\r\n    private shellsPlayerCollision(shell: Shell, player: Player): void {\r\n        const position: StartPosition = { x: shell.x, y: shell.y };\r\n        BangAnimation.generateBang(this, position);\r\n        shell.setAlive(false);\r\n        player.setAlive(false);\r\n        // this._player1 = null; ?\r\n    }\r\n\r\n    private shellsTurretCollision(turretPlatform: Phaser.GameObjects.Sprite, shell: Shell): void {\r\n        const position: StartPosition = { x: turretPlatform.x, y: turretPlatform.y };\r\n        BangAnimation.generateBang(this, position);\r\n        this._turret.destroyTurret();\r\n        shell.setAlive(false);\r\n        // this._player1 = null; ?\r\n    }\r\n\r\n    // see docs -> Scene.Methods\r\n    update(time: number, delta: number): void {\r\n        if (this._player1.active) this._player1.move();\r\n        if (this._turret.turret.active && this._player1.active) {\r\n            this._turret.runTurret(this._player1, this._map.isInDefenceArea(this._player1));\r\n        }\r\n    }\r\n\r\n    private getVehicleConfig(): any {\r\n        // config for the first player\r\n        let config: any = { player1: TANKS.RED, player2: TANKS.BLUE };\r\n        // if (this._client && !this._client._isFirst) {\r\n        //     // config for the second player\r\n        //     config = { player1: CARS.BLUE, player2: CARS.RED };\r\n        // }\r\n        return config;\r\n    }\r\n\r\n    private stopFiring(): void {\r\n        // if (this._turret) {\r\n        //     this._turret.isFiring = false;\r\n        // }\r\n    }\r\n}","import { LoadingBar } from \"../utils/LoadingBar\";\r\n\r\nexport default class PreloadScene extends Phaser.Scene {\r\n    constructor() {super({key: \"preload-scene\"});}\r\n\r\n    protected preload(): void {\r\n        this.add.sprite(0, 0, \"background\").setOrigin(0);\r\n        new LoadingBar(this);\r\n\r\n        // load images as a tileset\r\n        this.load.spritesheet(\"tileset\", \"assets/images/tilemap.png\", { frameWidth: 64, frameHeight: 64 });\r\n        this.load.tilemapTiledJSON(\"tilemap\", \"assets/images/tilemap.json\");\r\n        this.load.atlas(\"objects\", \"assets/images/objects.png\", \"assets/images/objects.json\");\r\n    }\r\n\r\n    protected create(): void {\r\n        this.scene.start(\"game-scene\");\r\n    }\r\n}","export class LoadingBar {\r\n    private scene: Phaser.Scene;\r\n    private style: any;\r\n    private progressBox: Phaser.GameObjects.Graphics;\r\n    private progressBar: Phaser.GameObjects.Graphics;\r\n\r\n    constructor(scene: Phaser.Scene) {\r\n        this.scene = scene;\r\n        this.style = {\r\n            boxColor: 0xD3D3D3,\r\n            barColor: 0xFFF8DC,\r\n            x: (this.scene.game.config.width) as number / 2 - 450,\r\n            y: (this.scene.game.config.height) as number / 2 + 250,\r\n            width: 900,\r\n            height: 25\r\n        };\r\n        this.progressBox = new Phaser.GameObjects.Graphics(this.scene);\r\n        this.progressBox = this.scene.add.graphics();\r\n        this.progressBar = this.scene.add.graphics();\r\n\r\n        this.showProgressBox();\r\n        this.setEvents();\r\n    }\r\n\r\n    setEvents() {\r\n        this.scene.load.on(\"progress\", this.showProgressBar, this);\r\n        this.scene.load.on(\"complete\", this.onLoadComplete, this);\r\n    }\r\n\r\n    showProgressBox() {\r\n        this.progressBox\r\n            .fillStyle(this.style.boxColor) // grey color\r\n            .fillRect(this.style.x, this.style.y, this.style.width, this.style.height);\r\n    }\r\n\r\n    showProgressBar(value: number) {\r\n        this.progressBar\r\n            .clear()\r\n            .fillStyle(this.style.barColor) // yellow color\r\n            .fillRect(this.style.x, this.style.y, this.style.width * value, this.style.height);\r\n    }\r\n\r\n    onLoadComplete() {\r\n        this.progressBox.destroy();\r\n        this.progressBar.destroy();\r\n    }\r\n}","export enum DIRECTIONS {\r\n    NONE = 0,\r\n    FORWARD = 100,\r\n    BACKWARD = -100\r\n};\r\n\r\nexport enum TURNS {\r\n    NONE = 0,\r\n    RIGHT = 1,\r\n    LEFT = -1\r\n};\r\n\r\nexport enum SPEED {\r\n    BASIC = 150,\r\n    FASTER = 200,\r\n    FASTEST = 300\r\n};\r\n\r\nexport const GROUND_FRICTION = 0.4;\r\nexport const ROADS_FRICTION = {\r\n    road: 1\r\n};\r\n\r\nexport const TANKS = {\r\n    RED: {\r\n        sprite: \"tank_red\",\r\n        position: \"player\"\r\n    },\r\n    BLUE: {\r\n        sprite: \"tank_green\",\r\n        position: \"player\"\r\n    }\r\n};\r\n\r\nexport type StartPosition = {\r\n    x: number,\r\n    y: number\r\n};\r\n\r\nexport const BANG_ANIMATION: string = \"BANG_ANIMATION\";\r\n\r\nexport default class Checkpoint extends Phaser.Geom.Rectangle{\r\n    public index: string;\r\n    constructor(x: number, y: number, width: number, height: number) {\r\n        super(x, y, width, height);\r\n    }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/game.ts\");\n",""],"names":[],"sourceRoot":""}